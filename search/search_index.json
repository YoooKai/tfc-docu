{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proyecto de Final de Ciclo","text":""},{"location":"#kai","title":"Kai","text":"<p>Mi proyecto consiste en el desarrollo de una plataforma web integral para una ilustradora profesional. La plataforma act\u00faa como un escaparate digital multifuncional que incluye: portfolio art\u00edstico, tienda online de productos, informaci\u00f3n sobre comisiones, blog personal, formulario de contacto, calendario de eventos y una secci\u00f3n informativa completa. Esta soluci\u00f3n personalizada responde directamente a las necesidades espec\u00edficas de la artista, centralizando todas sus actividades profesionales en un \u00fanico espacio digital accesible y f\u00e1cil de gestionar.</p>"},{"location":"dew/","title":"DEW","text":"<p>He utilizado Vue.js como framework principal para el desarrollo del frontend, aprovechando su estructura basada en componentes para construir una interfaz modular, clara y f\u00e1cilmente mantenible. Cada funcionalidad est\u00e1 dividida en componentes reutilizables que encapsulan l\u00f3gica, estilos y estructura, lo que facilita la escalabilidad y mejora la organizaci\u00f3n del c\u00f3digo.</p> <p>Durante el desarrollo, se contempl\u00f3 inicialmente la integraci\u00f3n con TypeScript para aprovechar sus beneficios en cuanto a tipado est\u00e1tico y detecci\u00f3n temprana de errores. No obstante, debido a problemas de compatibilidad al migrar componentes ya desarrollados en JavaScript y a restricciones de tiempo antes de la entrega, se opt\u00f3 por continuar con JavaScript puro para garantizar la estabilidad y funcionalidad del proyecto.</p> <p>El proyecto hace un uso intensivo de Pinia como gestor de estado global, lo que permite centralizar y sincronizar datos cr\u00edticos como la gesti\u00f3n del carrito de compras, el estado de autenticaci\u00f3n y el control de carga, proporcionando una experiencia de usuario fluida y reactiva.</p> <p>Entre las funcionalidades destacadas implementadas con Vue, se incluyen:</p> <ul> <li>Gesti\u00f3n din\u00e1mica de productos con opciones configurables y cantidades ajustables, integrando validaciones y actualizaci\u00f3n autom\u00e1tica de precios.</li> <li>Visualizaci\u00f3n avanzada de im\u00e1genes mediante una galer\u00eda modal con navegaci\u00f3n, para mejorar la experiencia visual.</li> <li>Persistencia del estado cr\u00edtico (carrito, sesi\u00f3n, usuario) mediante almacenamiento local (<code>localStorage</code>), lo que garantiza la continuidad de la sesi\u00f3n y los datos entre recargas o cierres del navegador.</li> <li>Uso de m\u00e9todos y propiedades computadas para mantener la l\u00f3gica de negocio desacoplada de la presentaci\u00f3n y optimizar el rendimiento.</li> </ul> <p>Como mejora futura, se plantea una migraci\u00f3n progresiva a TypeScript, comenzando por los componentes y m\u00f3dulos m\u00e1s cr\u00edticos y con mayor l\u00f3gica, para reforzar la robustez del c\u00f3digo sin comprometer la base establecida.</p>"},{"location":"dew/#dependencias-dependencies","title":"Dependencias (<code>dependencies</code>)","text":"<ul> <li> <p>vue (<code>^3.2.13</code>)</p> <p>Framework progresivo para construir interfaces de usuario. Versi\u00f3n 3, la m\u00e1s reciente y con Composition API.</p> </li> <li> <p>vue-router (<code>^4.0.3</code>)</p> <p>Librer\u00eda oficial para manejar rutas y navegaci\u00f3n en aplicaciones Vue 3.</p> </li> <li> <p>pinia (<code>^3.0.2</code>)</p> <p>Alternativa moderna y m\u00e1s ligera a Vuex para gesti\u00f3n de estado en Vue 3.</p> </li> <li> <p>axios (<code>^1.8.4</code>)</p> <p>Cliente HTTP para hacer peticiones AJAX a APIs, muy popular y sencillo de usar.</p> </li> <li> <p>aos (<code>^2.3.4</code>)</p> <p>Animate On Scroll, librer\u00eda para animar elementos cuando aparecen al hacer scroll en la p\u00e1gina.</p> </li> <li> <p>core-js (<code>^3.8.3</code>)</p> <p>Biblioteca para polyfills de JavaScript moderno, asegurando compatibilidad con navegadores antiguos.</p> </li> </ul> <p>Conexi\u00f3n de vue al backend de Django:  Se realiza la conexi\u00f3n del frontend (Vue) con el backend (Django REST Framework) a trav\u00e9s de la librer\u00eda <code>axios</code>. Las rutas protegidas est\u00e1n autenticadas con tokens JWT, y los datos de usuarios, productos y carrito son intercambiados entre cliente y servidor de forma segura y asincr\u00f3nica.</p>"},{"location":"dew/#componentes-y-vistas","title":"Componentes y vistas","text":"<p>Este proyecto cuenta con una serie de componentes y vistas:</p> <p>Vistas: About, Cart, Category, CategoryView, Checkout, Comissions, Contact, Events, FAQ, Home, LogIn, MyAccount,Portfolio, PostDetail, PostList, Product, Search, SignUp, Store, Success.</p> <p>Componentes: AuthModals, BaseTitle, CardPost, CartItem, CategorySidebar, Marquee, Modal, Navbar, OrderSummary, ProductBox, ProductGrid, Socials, SolidButton.</p> <p>A continuaci\u00f3n hablar\u00e9 de cada uno de ellos:</p>"},{"location":"dew/#navbarvue-componente","title":"Navbar.vue (componente)","text":"<p>Este componente gestiona la barra de navegaci\u00f3n, mostrando enlaces a las distintas vistas, el carrito y los controles de autenticaci\u00f3n. Adem\u00e1s, al montarse carga el token de la store y lo a\u00f1ade a los headers de Axios para que todas las llamadas al backend Django incluyan autenticaci\u00f3n.</p> <ul> <li> <p>Composition API &amp; SFC: usa <code>&lt;script setup&gt;</code> con <code>ref</code>, <code>computed</code> y <code>onMounted</code>.</p> <p>```jsx </p> <p>```</p> </li> <li> <p>Conexi\u00f3n a Django: inyecta el token en Axios para llamadas al API de Django.</p> <p>```jsx axios.defaults.headers.common['Authorization'] = 'Token ' + token</p> <p>```</p> </li> <li> <p>Pinia (composable): importa y utiliza la store (<code>useMainStore</code>) para estado global (auth, carrito).</p> <p>```jsx import { useMainStore } from '../store/mainstore' const mainStore = useMainStore()</p> <p>```</p> </li> <li> <p>Vue Router: usa <code>useRouter()</code> y <code>&lt;router-link&gt;</code> para navegaci\u00f3n SPA.</p> <p>```jsx TangerineMess.</p> <p>```</p> </li> <li> <p>Directivas: muestra/oculta elementos seg\u00fan <code>isAuthenticated</code> con <code>v-if</code>, controla clics con <code>@click</code>.</p> <p>```html  Mi cuenta \u2026</p> <p>```</p> </li> </ul> <p>Home.vue (vista)</p> <p>Pantalla de portada con un \u201chero\u201d a toda pantalla, un t\u00edtulo y dos componentes hijos (<code>Marquee</code> y <code>Socials</code>). Define el t\u00edtulo de la pesta\u00f1a del navegador y usa SVG para una curva decorativa.</p> <ul> <li>SFC: todo en un <code>.vue</code> con <code>&lt;template&gt;</code>, <code>&lt;script&gt;</code> y <code>&lt;style scoped&gt;</code>.</li> <li> <p>Components: importa y registra <code>Marquee</code> y <code>Socials</code>.</p> <p>``` </p> <p>```</p> </li> <li> <p>Estilos scoped: aplica estilos locales al hero y al texto con sombras CSS.</p> </li> </ul> <p>Marquee.vue (componente)</p> <p>Genera una cinta de texto que se desplaza indefinidamente, adaptando la duraci\u00f3n de la animaci\u00f3n al ancho del contenido.</p> <ul> <li>SFC &amp; Options API: usa <code>mounted</code> y <code>beforeUnmount</code> para hooks de ciclo de vida, y <code>methods</code> para l\u00f3gica.</li> <li> <p>Refs con <code>$refs</code>: accede directamente a los nodos DOM para medir ancho y posicionar el segundo bloque.</p> <p><code>`` mounted() {   this.adjustAnimation()   window.addEventListener('resize', this.adjustAnimation) }, methods: {   adjustAnimation() {     const width = this.$refs.marquee1.offsetWidth     // \u2026     this.$refs.marquee2.style.left =</code>${width}px`   } }</p> <p>```</p> </li> <li> <p>Animaci\u00f3n din\u00e1mica: inyecta un bloque <code>&lt;style&gt;</code> en el <code>&lt;head&gt;</code> con <code>@keyframes</code> que trasladan el texto seg\u00fan el ancho calculado.</p> </li> </ul>"},{"location":"dew/#loginvue","title":"Login.vue","text":"<p>Este componente implementa la funcionalidad de inicio de sesi\u00f3n para la aplicaci\u00f3n. Utiliza la Options API de Vue para manejar el estado local y m\u00e9todos. Cuando el usuario env\u00eda el formulario, se hace una petici\u00f3n POST al endpoint <code>/api/v1/token/login/</code> de la API Django REST para autenticar. Si la autenticaci\u00f3n es exitosa, se recibe un token que se almacena en <code>localStorage</code> y en un store global con Pinia (<code>useMainStore</code>). Adem\u00e1s, el token se configura en los headers de Axios para futuras peticiones autenticadas. Se redirige al usuario a la ruta <code>/store</code>. En caso de error, se muestran los mensajes recibidos desde el backend.</p> <p>Se usan datos reactivos para el formulario (<code>username</code>, <code>password</code>) y para almacenar errores que se presentan en la UI. La interacci\u00f3n con el store global permite centralizar el estado del usuario.</p> <p>Fragmento clave del m\u00e9todo que env\u00eda el formulario:</p> <pre><code>async submitForm() {\n  this.errors = []\n  axios.defaults.headers.common[\"Authorization\"] = \"\"\n  localStorage.removeItem(\"token\")\n\n  const formData = { username: this.username, password: this.password }\n  try {\n    const response = await axios.post(\"/api/v1/token/login/\", formData)\n    const token = response.data.auth_token\n\n    localStorage.setItem(\"username\", this.username)\n    localStorage.setItem(\"token\", token)\n    this.mainStore.setUsername(this.username)\n    this.mainStore.setToken(token)\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token\n    this.mainStore.initializeStore()\n\n    this.$router.push('/store')\n  } catch (error) {\n    if (error.response) {\n      for (const property in error.response.data) {\n        this.errors.push(`${property}: ${error.response.data[property]}`)\n      }\n    } else {\n      this.errors.push('Something went wrong. Please try again')\n    }\n  }\n}\n</code></pre>"},{"location":"dew/#signupvue","title":"SignUp.vue","text":"<p>Este componente permite registrar un nuevo usuario. Incluye un formulario con campos para usuario, email, contrase\u00f1a y confirmaci\u00f3n de contrase\u00f1a. Antes de enviar, se valida en el cliente que no falten campos y que las contrase\u00f1as coincidan, mostrando errores si es necesario.</p> <p>Al enviar el formulario, se realiza una petici\u00f3n POST al endpoint <code>/api/v1/users/</code> para crear el usuario en el backend. Si la petici\u00f3n es exitosa, se emite un evento hacia el componente padre para indicar que el registro fue exitoso y cambiar la vista a login. En caso de errores de validaci\u00f3n o de servidor, los mensajes se muestran en pantalla.</p> <p>Fragmento del m\u00e9todo que valida y env\u00eda los datos:</p> <pre><code>async submitForm() {\n  this.errors = []\n\n  if (!this.username) this.errors.push('El nombre de usuario es obligatorio')\n  if (!this.email) this.errors.push('El email es obligatorio')\n  if (!this.password) this.errors.push('La contrase\u00f1a es obligatoria')\n  if (this.password !== this.password2) this.errors.push('Las contrase\u00f1as no coinciden')\n\n  if (this.errors.length) return\n\n  try {\n    await axios.post('/api/v1/users/', {\n      username: this.username,\n      email: this.email,\n      password: this.password\n    })\n    this.$emit('signup-success')\n  } catch (error) {\n    if (error.response) {\n      for (const property in error.response.data) {\n        this.errors.push(`${property}: ${error.response.data[property]}`)\n      }\n    } else {\n      this.errors.push('Algo sali\u00f3 mal. Int\u00e9ntalo de nuevo.')\n    }\n  }\n}\n</code></pre>"},{"location":"dew/#modalvue","title":"Modal.vue","text":"<p>Un componente modal reutilizable que sirve como contenedor para mostrar contenido sobre una capa oscura en la pantalla. Recibe una propiedad booleana <code>show</code> que controla la visibilidad. Cuando el usuario hace click fuera del contenido (overlay) o en el bot\u00f3n de cerrar, se emite un evento <code>close</code> para que el componente padre controle el estado y oculte el modal.</p> <p>Usa un slot para permitir que cualquier contenido din\u00e1mico se inserte dentro del modal, por ejemplo, los formularios de login y signup. El modal est\u00e1 estilizado con bordes redondeados, sombra y animaci\u00f3n de aparici\u00f3n.</p> <p>C\u00f3digo clave:</p> <pre><code>&lt;template&gt;\n  &lt;div v-if=\"show\" class=\"modal-overlay\" @click.self=\"close\"&gt;\n    &lt;div class=\"modal-content cartoon-card animate-pop\"&gt;\n      &lt;button class=\"modal-close\" @click=\"close\"&gt;&lt;i class=\"fas fa-times\"&gt;&lt;/i&gt;&lt;/button&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Modal',\n  props: {\n    show: { type: Boolean, required: true }\n  },\n  emits: ['close'],\n  methods: {\n    close() {\n      this.$emit('close')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"dew/#authmodalsvue","title":"AuthModals.vue","text":"<p>Este componente es el encargado de controlar cu\u00e1l modal se muestra: el de login o el de registro (signup). Mantiene un estado local <code>showSignUp</code> que indica qu\u00e9 modal debe estar visible. Importa y usa los componentes <code>Modal</code>, <code>LogIn</code> y <code>SignUp</code>.</p> <p>Cuando se quiere cambiar entre login y signup, se invocan m\u00e9todos que actualizan <code>showSignUp</code>. Adem\u00e1s, maneja el evento de registro exitoso para cerrar el modal de signup, abrir el de login y mostrar un toast con Bootstrap para notificar al usuario que la cuenta fue creada.</p> <p>El componente tambi\u00e9n incluye el contenedor para los toasts de Bootstrap, y genera din\u00e1micamente los toasts para los mensajes.</p> <p>Fragmento que controla el estado y muestra los modales:</p> <pre><code>data() {\n  return {\n    showSignUp: false\n  }\n},\nmethods: {\n  switchToSignUp() {\n    this.showSignUp = true\n  },\n  switchToLogin() {\n    this.showSignUp = false\n  },\n  handleSignupSuccess() {\n    this.showSignUp = false\n    this.showBootstrapToast('\u00a1Cuenta creada! Ahora inicia sesi\u00f3n.', 'success')\n  },\n  showBootstrapToast(message, type = 'success') {\n    const toastContainer = document.getElementById('toast-container')\n    if (!toastContainer) return\n\n    const toastEl = document.createElement('div')\n    toastEl.className = `toast align-items-center text-white bg-primary border-0`\n    toastEl.style.minWidth = '300px'\n    toastEl.style.fontSize = '1.1rem'\n\n    toastEl.setAttribute('role', 'alert')\n    toastEl.setAttribute('aria-live', 'assertive')\n    toastEl.setAttribute('aria-atomic', 'true')\n    toastEl.innerHTML = `\n      &lt;div class=\"d-flex\"&gt;\n        &lt;div class=\"toast-body fs-5\"&gt;${message}&lt;/div&gt;\n        &lt;button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"&gt;&lt;/button&gt;\n      &lt;/div&gt;\n    `\n    toastContainer.appendChild(toastEl)\n    const bsToast = new bootstrap.Toast(toastEl, { delay: 3000 })\n    bsToast.show()\n    toastEl.addEventListener('hidden.bs.toast', () =&gt; { toastEl.remove() })\n  }\n}\n</code></pre>"},{"location":"dew/#storevue","title":"Store.vue","text":"<p>Este componente es la p\u00e1gina principal de la tienda. Su estructura HTML est\u00e1 dividida en un sidebar con las categor\u00edas y un \u00e1rea principal con la b\u00fasqueda y el listado de productos.</p> <ul> <li>Usa un componente <code>CategoriesSidebar</code> para mostrar la lista de categor\u00edas disponibles, destacando la categor\u00eda activa.</li> <li>Tiene un formulario de b\u00fasqueda que redirige a la ruta <code>/search</code> enviando el t\u00e9rmino en query string.</li> <li>Los productos m\u00e1s recientes se cargan desde la API (<code>/api/v1/latest-products/</code>) al montar el componente, almacen\u00e1ndose en <code>latestProducts</code>.</li> <li>Usa el componente <code>ProductsGrid</code> para renderizar la grilla de productos.</li> <li>Adem\u00e1s, usa un store global <code>useMainStore</code> para manejar el estado de carga (<code>isLoading</code>) mientras se obtiene la informaci\u00f3n.</li> </ul> <p>Fragmento clave de la llamada a la API para obtener productos recientes:</p> <pre><code>async fetchLatestProducts() {\n  const store = useMainStore()\n  store.setIsLoading(true)\n\n  try {\n    const res = await axios.get(\"/api/v1/latest-products/\")\n    this.latestProducts = res.data\n  } catch (error) {\n    console.error(error)\n  }\n\n  store.setIsLoading(false)\n}\n</code></pre> <p>El CSS se encarga de estilos responsivos para el formulario de b\u00fasqueda y la disposici\u00f3n general, con colores personalizados.</p>"},{"location":"dew/#categoriessidebarvue","title":"CategoriesSidebar.vue","text":"<p>Este componente es una barra lateral que lista las categor\u00edas de productos disponibles para filtrar.</p> <ul> <li>Recibe por prop <code>activeCategorySlug</code> para saber qu\u00e9 categor\u00eda est\u00e1 activa y aplicar estilos especiales.</li> <li>Usa enlaces <code>router-link</code> para navegar entre categor\u00edas, cada uno con una ruta distinta.</li> <li>Tiene estilos personalizados para los enlaces, con efecto hover y resaltado para la categor\u00eda activa.</li> <li>Emplea el componente <code>BaseTitle</code> para mostrar un t\u00edtulo estilizado \"Categor\u00edas\".</li> <li>El m\u00e9todo <code>isActive(slug)</code> devuelve true si el slug coincide con la categor\u00eda activa, para aplicar la clase CSS <code>active</code>.</li> </ul> <p>Fragmento del m\u00e9todo que determina si una categor\u00eda est\u00e1 activa:</p> <pre><code>methods: {\n  isActive(slug) {\n    return this.activeCategorySlug === slug;\n  }\n}\n</code></pre> <p>Estil\u00edsticamente destaca la usabilidad con colores, transici\u00f3n y tipograf\u00eda custom.</p>"},{"location":"dew/#searchvue","title":"Search.vue","text":"<p>Este componente muestra los resultados de b\u00fasqueda de productos basados en el t\u00e9rmino que el usuario ingres\u00f3.</p> <ul> <li>Obtiene el par\u00e1metro de b\u00fasqueda desde la URL con <code>useRoute</code> y lo almacena en una variable reactiva <code>query</code>.</li> <li>Cada vez que cambia <code>query</code> o al montar el componente, se hace una petici\u00f3n POST al backend (<code>/api/v1/products/search/</code>) enviando el t\u00e9rmino de b\u00fasqueda.</li> <li>Los productos encontrados se almacenan en <code>products</code>.</li> <li>Si no hay productos, se muestra un mensaje de aviso.</li> <li>Se usan componentes <code>ProductBox</code> para mostrar cada producto, <code>BaseTitle</code> para el encabezado y <code>SolidButton</code> para un bot\u00f3n que vuelve a la tienda completa.</li> </ul> <p>Fragmento que realiza la b\u00fasqueda:</p> <pre><code>async function performSearch() {\n  try {\n    const response = await axios.post('/api/v1/products/search/', { query: query.value })\n    products.value = response.data\n  } catch (error) {\n    console.error(error)\n  }\n}\n</code></pre> <p>Adem\u00e1s, hay un watcher que responde a cambios en la query para actualizar los resultados sin recargar.</p>"},{"location":"dew/#productboxvue","title":"ProductBox.vue","text":"<p>Componente que representa una tarjeta individual de producto.</p> <ul> <li>Muestra la imagen principal, el nombre y el precio del producto.</li> <li>El nombre y la imagen son enlaces que llevan a la p\u00e1gina del producto (usando <code>product.get_absolute_url</code>).</li> <li>La imagen tiene un efecto de zoom al pasar el mouse.</li> <li>La tarjeta tiene efectos visuales para mejorar la experiencia, como sombra y desplazamiento al hacer hover.</li> <li>Estilizado con colores c\u00e1lidos y tipograf\u00edas definidas para mantener el estilo visual del sitio.</li> </ul> <p>Fragmento de la estructura principal:</p> <pre><code>&lt;div class=\"card h-100 border-0 product-card\"&gt;\n  &lt;router-link :to=\"product.get_absolute_url\" class=\"image-link\"&gt;\n    &lt;img :src=\"product.get_thumbnail\" alt=\"Product image\" class=\"card-img-top\" /&gt;\n  &lt;/router-link&gt;\n  &lt;div class=\"card-body d-flex flex-column px-2 py-2\"&gt;\n    &lt;router-link :to=\"product.get_absolute_url\" class=\"product-name text-uppercase fw-bold mb-2 mt-2\"&gt;\n      {{ product.name }}\n    &lt;/router-link&gt;\n    &lt;p class=\"product-price mt-auto mb-3\"&gt;{{ product.price }} \u20ac&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"dew/#productsgridvue","title":"ProductsGrid.vue","text":"<p>Este componente es un contenedor que recibe un array de productos y renderiza una grilla con tarjetas <code>ProductBox</code>.</p> <ul> <li>Recibe por prop <code>products</code> la lista de productos.</li> <li>Usa un <code>v-for</code> para iterar y renderizar cada producto.</li> <li>Facilita la reutilizaci\u00f3n y organizaci\u00f3n, permitiendo mostrar grillas de productos en cualquier parte del proyecto.</li> </ul> <p>Fragmento de la plantilla:</p> <pre><code>&lt;div class=\"row g-4 container-custom\"&gt;\n  &lt;ProductBox\n    v-for=\"product in products\"\n    :key=\"product.id\"\n    :product=\"product\"\n  /&gt;\n&lt;/div&gt;\n</code></pre> <p>No tiene l\u00f3gica extra, solo la estructura y la importaci\u00f3n de <code>ProductBox</code>.</p>"},{"location":"dew/#category","title":"<code>Category</code>","text":"<p>Este componente es como la ventana que muestra los productos de una categor\u00eda espec\u00edfica. Cuando entras, hace una llamada al backend con Axios para traer la info: el nombre de la categor\u00eda y sus productos.</p> <ul> <li>Usa <code>useMainStore</code> (Pinia) para manejar un loading que le avisa al usuario que est\u00e1 cargando datos.</li> <li>Escucha cuando cambias de categor\u00eda en la URL y autom\u00e1ticamente recarga los datos.</li> <li>Tambi\u00e9n actualiza el t\u00edtulo de la pesta\u00f1a del navegador con el nombre de la categor\u00eda.</li> </ul> <p>Un pedacito importante:</p> <pre><code>async getCategory() {\n  const categorySlug = this.$route.params.category_slug\n  store.setIsLoading(true)\n  try {\n    const response = await axios.get(`/api/v1/products/${categorySlug}/`)\n    this.category = response.data\n    document.title = this.category.name + ' | TangerinMess'\n  } catch (error) {\n    toast({ message: 'Algo sali\u00f3 mal, intenta de nuevo.', type: 'is-danger' })\n  }\n  store.setIsLoading(false)\n}\n</code></pre> <p>En resumen: cuando abres una categor\u00eda, este componente se encarga de mostrar el t\u00edtulo y una lista de productos con un componente <code>ProductBox</code> que recibe cada producto como prop.</p>"},{"location":"dew/#categoryview","title":"<code>CategoryView</code>","text":"<p>Esta vista es como la versi\u00f3n m\u00e1s completa y pulida del <code>Category</code>. Aqu\u00ed tienes el sidebar con todas las categor\u00edas para navegar, un buscador para filtrar productos y el listado de productos en un grid.</p> <ul> <li>El sidebar se hace con un componente <code>CategoriesSidebar</code> que recibe todas las categor\u00edas.</li> <li>El buscador est\u00e1 preparado para enviar la consulta a la ruta <code>/search</code>.</li> <li>Si la categor\u00eda no tiene productos, muestra un mensaje amigable avisando que no hay productos.</li> <li>Igual que en el otro, hace la llamada con Axios para traer la categor\u00eda y productos y actualiza el t\u00edtulo.</li> </ul> <p>Un fragmento clave del template para el buscador y productos:</p> <pre><code>&lt;form method=\"get\" action=\"/search\" class=\"mb-4 search-form ms-auto\"&gt;\n  &lt;div class=\"input-group\"&gt;\n    &lt;input type=\"text\" class=\"form-control\" placeholder=\"\u00bfQu\u00e9 est\u00e1s buscando?\" name=\"query\" /&gt;\n    &lt;button class=\"btn btn-custom\" type=\"submit\"&gt;\n      &lt;i class=\"fas fa-search\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;div class=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4\"&gt;\n  &lt;ProductBox\n    v-for=\"product in category.products\"\n    :key=\"product.id\"\n    :product=\"product\"\n  /&gt;\n&lt;/div&gt;\n\n&lt;div v-if=\"category.products.length === 0\" class=\"alert alert-warning text-center mt-4\"&gt;\n  No hay productos disponibles en esta categor\u00eda.\n&lt;/div&gt;\n</code></pre> <p>Este componente te da la experiencia completa para navegar, buscar y visualizar productos en una categor\u00eda, con estilos responsivos y sidebar para facilitar la navegaci\u00f3n.</p>"},{"location":"dew/#contact","title":"<code>Contact</code>","text":"<p>Aqu\u00ed tienes el formulario para que los usuarios puedan enviarte mensajes o pedir colaboraciones. La magia es que todo se maneja con Vue: el formulario est\u00e1 ligado con <code>v-model</code> para capturar cada dato, y cuando env\u00edas, hace un POST a la API con Axios.</p> <ul> <li>Si el env\u00edo es exitoso, muestra un toast verde con el mensaje de \u00e9xito.</li> <li>Si falla, muestra un toast rojo con el error.</li> <li>Tambi\u00e9n tienes enlaces a redes sociales con iconos muy visibles para que te encuentren f\u00e1cilmente.</li> <li>El formulario es s\u00faper sencillo, con validaciones b\u00e1sicas (todos los campos son requeridos).</li> </ul> <p>Este m\u00e9todo muestra c\u00f3mo se hace el env\u00edo y el manejo de los mensajes:</p> <pre><code>async handleSubmit() {\n  try {\n    const response = await axios.post('http://127.0.0.1:8000/api/v1/contact/', this.formData)\n    this.message = response.data.message || '\u00a1Mensaje enviado correctamente!'\n    this.messageType = 'success'\n    this.resetForm()\n  } catch (error) {\n    this.message = 'Error al enviar. Intenta de nuevo.'\n    this.messageType = 'error'\n  }\n  this.showToast = true\n  setTimeout(() =&gt; { this.showToast = false }, 4000)\n},\n</code></pre> <p>En pocas palabras: este componente da una experiencia limpia y sencilla para que cualquier persona pueda contactarte f\u00e1cilmente, con mensajes claros de confirmaci\u00f3n o error.</p> <p>Claro, aqu\u00ed te dejo una documentaci\u00f3n m\u00e1s personal, explicando qu\u00e9 hace cada componente (Cart, CartItem y Checkout) con fragmentos relevantes de c\u00f3digo para que lo entiendas bien y puedas usarlo o modificarlo con confianza.</p>"},{"location":"dew/#cartvue","title":"Cart.vue","text":"<p>Este es el contenedor principal del carrito de compras. Su funci\u00f3n es mostrar todos los productos que el usuario ha agregado, mostrar el resumen del pedido con el subtotal y total, y ofrecer un bot\u00f3n para ir al checkout.</p> <ul> <li>Muestra una lista de productos con el componente <code>CartItem</code>.</li> <li>Calcula y muestra el total del pedido.</li> <li>Permite eliminar productos del carrito usando el m\u00e9todo <code>removeFromCart</code> del store.</li> <li>Si el carrito est\u00e1 vac\u00edo, muestra un mensaje informativo.</li> </ul> <pre><code>&lt;CartItem\n  v-for=\"item in cart.items\"\n  :key=\"item.product.id\"\n  :item=\"item\"\n  @removeFromCart=\"removeFromCart\"\n/&gt;\n\n&lt;div class=\"summary-row\"&gt;\n  &lt;span&gt;Subtotal&lt;/span&gt;\n  &lt;span&gt;{{ cartTotalPrice.toFixed(2) }} \u20ac&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;SolidButton\n  text=\"Ir a la caja\"\n  iconClass=\"fas fa-arrow-right\"\n  routeTo=\"/cart/checkout\"\n/&gt;\n</code></pre>"},{"location":"dew/#_1","title":"DEW","text":""},{"location":"dew/#cartitemvue","title":"CartItem.vue","text":"<p>Este componente representa cada producto dentro del carrito. Se encarga de mostrar detalles del producto, su imagen, precio, opci\u00f3n seleccionada, cantidad y el total de ese producto. Adem\u00e1s, tiene controles para incrementar o decrementar la cantidad, y eliminar el producto.</p>"},{"location":"dew/#_2","title":"DEW","text":"<ul> <li>Muestra informaci\u00f3n clave del producto.</li> <li>Permite cambiar la cantidad con botones + y \u2212.</li> <li>Elimina el producto del carrito si la cantidad baja a cero o si el usuario lo elimina expl\u00edcitamente.</li> <li>Actualiza el localStorage para mantener la persistencia del carrito.</li> </ul>"},{"location":"dew/#_3","title":"DEW","text":"<pre><code>&lt;button class=\"qty-btn\" @click=\"decrementQuantity(item)\" :disabled=\"item.quantity &lt;= 1\"&gt;\u2212&lt;/button&gt;\n&lt;span class=\"quantity\"&gt;{{ item.quantity }}&lt;/span&gt;\n&lt;button class=\"qty-btn\" @click=\"incrementQuantity(item)\"&gt;+&lt;/button&gt;\n\n&lt;span class=\"total\"&gt;{{ getItemTotal(item).toFixed(2) }}\u20ac&lt;/span&gt;\n\nfunction incrementQuantity(item) {\n  item.quantity += 1\n  mainStore.updateLocalStorageCart()\n}\n\nfunction decrementQuantity(item) {\n  if (item.quantity &gt; 1) {\n    item.quantity -= 1\n    mainStore.updateLocalStorageCart()\n  } else {\n    removeFromCart(item)\n  }\n}\n</code></pre>"},{"location":"dew/#_4","title":"DEW","text":"<p>Este componente es muy \u00fatil porque permite al usuario controlar exactamente qu\u00e9 quiere comprar, y cu\u00e1ntos. Adem\u00e1s, mantiene todo sincronizado con el store y el almacenamiento local, asegurando que los datos no se pierdan.</p>"},{"location":"dew/#checkoutvue","title":"Checkout.vue","text":"<p>Esta es la p\u00e1gina de pago, donde el usuario introduce sus datos de env\u00edo y puede revisar el pedido antes de confirmar el pago.</p> <ul> <li>Muestra un resumen detallado del pedido, con productos, cantidades, precios, peso y coste de env\u00edo.</li> <li>Calcula el peso total con el sobre y ajusta el coste de env\u00edo seg\u00fan ese peso.</li> <li>Recoge la informaci\u00f3n del usuario (nombre, email, direcci\u00f3n, etc.) para el env\u00edo.</li> <li>Valida que todos los campos est\u00e9n completos.</li> <li>Integra Stripe para gestionar el pago con tarjeta.</li> </ul>"},{"location":"dew/#_5","title":"DEW","text":"<pre><code>&lt;tbody&gt;\n  &lt;tr v-for=\"item in cart.items\" :key=\"item.product.id\"&gt;\n    &lt;td&gt;{{ item.product.name }} &lt;span class=\"option-highlight\"&gt; - {{ item.product.selectedOption?.name || 'N/A' }}&lt;/span&gt;&lt;/td&gt;\n    &lt;td class=\"price-text\"&gt;{{ formatPrice(item.product.price) }}&lt;/td&gt;\n    &lt;td&gt;{{ item.quantity }}&lt;/td&gt;\n    &lt;td class=\"price-text\"&gt;{{ formatPrice(getItemTotal(item)) }}&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n\nconst totalWeightWithEnvelope = computed(() =&gt; {\n  const baseEnvelopeWeight = 30\n  const totalProductWeight = store.cart.items.reduce((acc, item) =&gt; {\n    return acc + item.quantity * (item.product.totalWeight || 0)\n  }, 0)\n  return baseEnvelopeWeight + totalProductWeight\n})\n\nconst shippingCost = computed(() =&gt; {\n  const weight = totalWeightWithEnvelope.value\n  if (weight &lt;= 500) return 5\n  else if (weight &lt;= 1000) return 8\n  return 12\n})\n\nfunction submitForm() {\n  errors.value = []\n\n  if (!first_name.value) errors.value.push('The first name field is missing!')\n  // ... validations para otros campos\n\n  if (!errors.value.length) {\n    store.setIsLoading(true)\n\n    stripe.value.createToken(card.value).then(result =&gt; {\n      if (result.error) {\n        store.setIsLoading(false)\n        errors.value.push('Something went wrong with Stripe. Please try again')\n      } else {\n        stripeTokenHandler(result.token)\n      }\n    })\n  }\n}\n</code></pre> <p>Esta pantalla es fundamental para cerrar la compra. Combina la validaci\u00f3n del formulario, c\u00e1lculo de costes y la integraci\u00f3n con Stripe para que todo el proceso sea seguro y sencillo para el usuario.</p> <pre><code>function incrementQuantity(item) {\n  item.quantity += 1\n  mainStore.updateLocalStorageCart()\n}\n\nfunction decrementQuantity(item) {\n  if (item.quantity &gt; 1) {\n    item.quantity -= 1\n    mainStore.updateLocalStorageCart()\n  } else {\n    removeFromCart(item)\n  }\n}\n</code></pre> <p>Este c\u00f3digo permite aumentar o disminuir la cantidad del producto y asegura que los datos se mantengan guardados para que el usuario no pierda el carrito al recargar la p\u00e1gina.</p>"},{"location":"dew/#myaccount","title":"MyAccount","text":"<p>Este componente Vue usa SFC y mezcla Options API con Composition API para acceder a un store Pinia (<code>useMainStore</code>). Se conecta al backend mediante llamadas axios para obtener los pedidos y maneja la sesi\u00f3n usando localStorage y Vue Router para la navegaci\u00f3n.</p> <ul> <li> <p>Conexi\u00f3n al backend (Django REST API):</p> <p>Se realiza una llamada a la API para obtener pedidos:</p> <p>```jsx async getMyOrders() {   const response = await axios.get('/api/v1/orders/')   this.orders = response.data }</p> <p>```</p> </li> <li> <p>Uso parcial de Composition API y SFC:</p> <p>El componente es un SFC y usa setup() para Pinia:</p> <p>```jsx setup() {   const mainStore = useMainStore()   return { mainStore } }</p> <p>```</p> </li> <li> <p>Uso de directivas Vue:</p> <p>En template se usan <code>v-if</code>, <code>v-for</code> y eventos con <code>@click</code>:</p> <p>```jsx Salir ... <p>Hola, {{ username }}</p></p> <p>```</p> </li> <li> <p>Uso de Pinia (store) para estado global:</p> <p>```jsx import { useMainStore } from '../store/mainstore'</p> <p>```</p> </li> <li> <p>Uso de localStorage para mantener sesi\u00f3n y logout:</p> <p>```jsx logout() {   localStorage.removeItem(\"token\")   localStorage.removeItem(\"username\")   localStorage.removeItem(\"userid\") }</p> <p>```</p> </li> <li> <p>Uso de Vue Router para redireccionar tras logout:</p> <p>```jsx this.$router.push('/')</p> <p>```</p> </li> </ul>"},{"location":"dew/#ordersummary","title":"OrderSummary","text":"<p>Este componente Vue recibe una prop <code>order</code> y muestra los detalles del pedido. Est\u00e1 en formato SFC y usa solo Options API con propiedades computadas para c\u00e1lculos y formato.</p> <ul> <li> <p>Uso de props:</p> <p>Recibe la orden como prop:</p> <p>```jsx props: {   order: Object }</p> <p>```</p> </li> <li> <p>Uso de computed properties:</p> <p>Para formatear fecha y calcular totales:</p> <p>```jsx computed: {   formattedOrderDate() {     const date = new Date(this.order.created_at)     return date.toLocaleDateString('es-ES')   },   orderTotalPrice() {     return this.order.items.reduce((total, item) =&gt; total + Number(item.price) * item.quantity, 0)   } }</p> <p>```</p> </li> <li> <p>Uso de m\u00e9todos para c\u00e1lculos y formateo:</p> <p>```jsx methods: {   getItemTotal(item) {     return item.quantity * item.product.price   },   formatPrice(value) {     return new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'EUR' }).format(value)   } }</p> <p>```</p> </li> <li> <p>Uso de directivas Vue:</p> <p><code>v-for</code> para listar productos:</p> <p>```jsx  <p>```</p>"},{"location":"dew/#success","title":"Success","text":"<p>Componente simple SFC que muestra mensaje est\u00e1tico. Usa Options API y Vue Router para cambiar t\u00edtulo en <code>mounted</code>. Se usa para redirigir a esta vista cuando se confirma una compra.</p> <ul> <li> <p>Uso de lifecycle hook para document title:</p> <p>```jsx mounted() {   document.title = 'Success ' }</p> <p>```</p> </li> </ul>"},{"location":"dew/#basetitle","title":"BaseTitle","text":"<p>Este componente es un t\u00edtulo reutilizable y personalizable para mostrar encabezados en la aplicaci\u00f3n.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Renderiza un <code>&lt;h2&gt;</code> con texto din\u00e1mico recibido por props y permite personalizar el color, la fuente y el tama\u00f1o del texto mediante props tambi\u00e9n. Esto facilita que el mismo componente pueda usarse en distintos contextos con estilos diferentes sin modificar el componente base.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Recibe las props <code>text</code> (obligatoria), <code>color</code>, <code>font</code> y <code>size</code>.</li> <li>Usa binding din\u00e1mico en el atributo <code>style</code> para aplicar los estilos recibidos.</li> <li>Est\u00e1 estructurado como un Single File Component (SFC) t\u00edpico en Vue.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>props: {\n  text: { type: String, required: true },\n  color: { type: String, default: 'var(--color-secondary)' },\n  font: { type: String, default: \"'ObviouslyNarrow', sans-serif\" },\n  size: { type: String, default: '3.6rem' }\n}\n</code></pre> <ul> <li>Uso del binding din\u00e1mico:</li> </ul> <pre><code>&lt;h2 :style=\"{ color: color, fontFamily: font, fontSize: size }\"&gt;{{ text }}&lt;/h2&gt;\n</code></pre>"},{"location":"dew/#cardpost","title":"CardPost","text":"<p>Este componente representa una tarjeta que muestra un post o art\u00edculo de blog con su t\u00edtulo, extracto, fecha, g\u00e9nero y una imagen.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Muestra la informaci\u00f3n b\u00e1sica de un post en un formato visual atractivo, con imagen, fecha resaltada y un enlace para ir al post completo. Al pasar el cursor sobre la tarjeta, la imagen y el contenido cambian suavemente, mejorando la experiencia visual.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Recibe varias props para su contenido (<code>title</code>, <code>excerpt</code>, <code>date</code>, <code>genre</code>, <code>image</code>, <code>slug</code>).</li> <li>Utiliza computed properties para:<ul> <li>Separar la fecha en d\u00eda, mes y a\u00f1o (<code>dateParts</code>).</li> <li>Mostrar una imagen por defecto si no se pasa ninguna (<code>imageToShow</code>).</li> </ul> </li> <li>Usa <code>&lt;router-link&gt;</code> para enlazar a la p\u00e1gina del post, integr\u00e1ndose con Vue Router para navegaci\u00f3n SPA.</li> <li>Tiene efectos visuales en hover mediante CSS para mejorar la interacci\u00f3n.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>props: {\n  title: String,\n  excerpt: String,\n  date: String,\n  genre: String,\n  image: String,\n  slug: { type: String, required: true }\n},\ncomputed: {\n  dateParts() { return this.date.split(' '); },\n  imageToShow() { return this.image || 'https://via.placeholder.com/300x200?text=No+Image'; }\n}\n</code></pre> <ul> <li>Enlace din\u00e1mico con router:</li> </ul> <pre><code>&lt;router-link :to=\"`/blog/posts/${slug}`\" class=\"read-more\"&gt;Leer m\u00e1s&lt;/router-link&gt;\n</code></pre>"},{"location":"dew/#sociallinks","title":"SocialLinks","text":"<p>Componente simple que muestra iconos sociales con enlaces a diferentes plataformas.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Renderiza una barra de iconos que enlazan a redes sociales espec\u00edficas. Es un componente est\u00e1tico sin l\u00f3gica compleja, ideal para colocarse en pies de p\u00e1gina o secciones de contacto.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Usa etiquetas <code>&lt;a&gt;</code> con atributos para accesibilidad (<code>aria-label</code>) y seguridad (<code>rel=\"noopener\"</code>).</li> <li>Contiene iconos con clases de FontAwesome.</li> <li>Est\u00e1 estructurado como un SFC b\u00e1sico sin props ni estados.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>&lt;a href=\"https://www.instagram.com/...\" target=\"_blank\" rel=\"noopener\" aria-label=\"Instagram\"&gt;\n  &lt;i class=\"fab fa-instagram\"&gt;&lt;/i&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"dew/#solidbutton","title":"SolidButton","text":"<p>Bot\u00f3n reutilizable con texto, icono y acci\u00f3n para volver o navegar a una ruta espec\u00edfica.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Muestra un bot\u00f3n con un \u00edcono (por defecto una flecha hacia la izquierda) y un texto. Al hacer clic, navega program\u00e1ticamente a la ruta especificada (por defecto <code>/posts</code>). Es \u00fatil para acciones de navegaci\u00f3n dentro de la app.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Recibe las props <code>text</code>, <code>iconClass</code> y <code>routeTo</code> para personalizaci\u00f3n.</li> <li>Usa el m\u00e9todo <code>goBack</code> que utiliza Vue Router (<code>this.$router.push</code>) para cambiar de ruta sin recargar la p\u00e1gina.</li> <li>Tiene estilos para efectos hover y desplazamiento del icono.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>methods: {\n  goBack() {\n    this.$router.push(this.routeTo);\n  }\n}\n</code></pre> <ul> <li>Uso de evento en template:</li> </ul> <pre><code>&lt;button @click=\"goBack\"&gt;\n  &lt;i :class=\"iconClass\"&gt;&lt;/i&gt;\n  &lt;span&gt;{{ text }}&lt;/span&gt;\n&lt;/button&gt;\n</code></pre>"},{"location":"dew/#about","title":"About","text":"<p>P\u00e1gina que muestra informaci\u00f3n \"Sobre m\u00ed\" obtenida desde un backend.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Al montarse, hace una petici\u00f3n HTTP usando axios para obtener contenido de la secci\u00f3n \u201cAbout\u201d desde una API REST. Si hay contenido, lo muestra con texto e imagen. Si no, muestra un mensaje de alerta.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Usa el ciclo de vida <code>mounted()</code> para hacer la llamada axios.</li> <li>Guarda el contenido en <code>data</code> y actualiza el DOM con <code>v-if</code> para condicionar la presentaci\u00f3n.</li> <li>Cambia el t\u00edtulo del documento para SEO y usabilidad.</li> <li>M\u00e9todo para convertir rutas relativas de im\u00e1genes a URLs absolutas.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>async getAboutContent() {\n  try {\n    const response = await axios.get('/api/v1/about/');\n    this.aboutContent = response.data;\n  } catch (error) {\n    console.error('Error fetching about content:', error);\n  }\n}\n</code></pre> <ul> <li>Condicional en template:</li> </ul> <pre><code>&lt;div v-if=\"aboutContent\"&gt;\n  &lt;p&gt;{{ aboutContent.content }}&lt;/p&gt;\n  &lt;img :src=\"getImageUrl(aboutContent.image)\" alt=\"About Illustration\" /&gt;\n&lt;/div&gt;\n&lt;div v-else&gt;\n  &lt;p&gt;About content is not available.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"dew/#commissions","title":"Commissions","text":"<p>P\u00e1gina que muestra una lista de comisiones disponibles, obtenidas desde backend.</p> <ul> <li> <p>Qu\u00e9 hace:</p> <p>Hace una petici\u00f3n HTTP para obtener una lista de comisiones, luego las renderiza en una lista con imagen, descripci\u00f3n, precio y slots disponibles. Usa dise\u00f1o responsivo y alterna el orden de imagen/texto en cada elemento para variedad visual.</p> </li> <li> <p>Caracter\u00edsticas importantes:</p> <ul> <li>Usa <code>axios</code> para cargar datos desde API en <code>mounted()</code>.</li> <li>Usa <code>v-for</code> para iterar din\u00e1micamente las comisiones.</li> <li>Utiliza <code>v-html</code> para renderizar contenido HTML seguro dentro de la descripci\u00f3n.</li> <li>Cambia el orden de elementos con clases din\u00e1micas para que la presentaci\u00f3n sea m\u00e1s atractiva.</li> <li>M\u00e9todo para generar URLs absolutas de im\u00e1genes.</li> </ul> </li> <li>C\u00f3digo clave:</li> </ul> <pre><code>async getCommissions() {\n  try {\n    const response = await axios.get('/api/v1/commissions/');\n    this.commissions = response.data;\n  } catch (error) {\n    console.error('Error fetching commissions:', error);\n  }\n}\n</code></pre> <ul> <li>Iteraci\u00f3n con v-for y clases din\u00e1micas:</li> </ul> <pre><code>&lt;div v-for=\"(commission, index) in commissions\" :key=\"commission.id\" :class=\"{ 'flex-row-reverse': index % 2 === 1 }\"&gt;\n  &lt;!-- contenido --&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"dew/#_6","title":"DEW","text":""},{"location":"dew/#eventsviewvue","title":"<code>EventsView.vue</code>","text":"<p>Este componente Vue muestra una lista de pr\u00f3ximos eventos obtenidos desde un backend (API REST de Django) usando Axios para hacer la petici\u00f3n.</p> <p>Se estructura como un Single File Component (SFC) con su template, script y estilos encapsulado</p> <ul> <li> <p>Carga de eventos al montar el componente:</p> <p>En el ciclo de vida <code>mounted()</code>, se llama al m\u00e9todo <code>getEvents()</code> que hace una petici\u00f3n GET y actualiza el array reactivo <code>events</code>:</p> </li> </ul> <pre><code>mounted() {\n  this.getEvents();\n  document.title = 'Upcoming Events';\n},\nmethods: {\n  async getEvents() {\n    try {\n      const response = await axios.get('/api/v1/events/');\n      this.events = response.data;\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  },\n  ...\n}\n</code></pre> <ul> <li> <p>Renderizado din\u00e1mico con directivas:</p> <p>Se usa <code>v-if</code> para mostrar una alerta cuando no hay eventos:</p> </li> </ul> <pre><code>v v-if=\"events.length === 0\" class=\"alert alert-warning\" role=\"alert\"&gt;\n  No hay futuros eventos actualmente.\n&lt;/div&gt;\n</code></pre> <p>Y <code>v-for</code> para listar eventos en tarjetas:</p> <pre><code>or=\"event in events\" :key=\"event.id\" class=\"col-md-6 mb-5\"&gt;\n  &lt;div class=\"card shadow border-0 overflow-hidden flex-md-row h-100\"&gt;\n    &lt;img :src=\"getImageUrl(event.image)\" :alt=\"event.title\" class=\"event-img\" /&gt;\n    &lt;div class=\"p-4 d-flex flex-column justify-content-between flex-grow-1\"&gt;\n      &lt;h3 class=\"event-title\"&gt;{{ event.title }}&lt;/h3&gt;\n      &lt;p class=\"event-location mb-3\"&gt;{{ event.location }}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>M\u00e9todos para formateo y construcci\u00f3n de URLs:</li> </ul> <pre><code>methods: {\n  getImageUrl(imagePath) {\n    return `http://localhost:8000${imagePath}`;\n  },\n  formatShortDayMonth(dateStr) {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('es-ES', { day: '2-digit', month: 'short' });\n  },\n  getYear(dateStr) {\n    return new Date(dateStr).getFullYear();\n  },\n  ...\n}\n</code></pre>"},{"location":"dew/#faqviewvue","title":"<code>FAQView.vue</code>","text":"<p>Este componente muestra una lista de preguntas frecuentes (FAQ) obtenidas desde un backend Django mediante Axios.</p> <p>Se estructura como un Single File Component (SFC) y utiliza las funcionalidades b\u00e1sicas de Vue para mostrar/ocultar respuestas con interacci\u00f3n del usuario.</p>"},{"location":"dew/#funcionalidades-principales","title":"Funcionalidades principales","text":"<ul> <li> <p>Carga de FAQs al montar el componente:</p> <p>En <code>mounted()</code>, se obtiene la lista de preguntas frecuentes desde la API y se inicializa cada item con la propiedad reactiva <code>isOpen</code> para controlar la visibilidad de la respuesta.</p> </li> </ul> <pre><code>async getFAQ() {\n  try {\n    const response = await axios.get('/api/v1/faq/');\n    this.faq = response.data.map(item =&gt; ({ ...item, isOpen: false }));\n  } catch (error) {\n    console.error('Error fetching FAQs:', error);\n  }\n},\nmounted() {\n  this.getFAQ();\n  document.title = 'Preguntas Frecuentes';\n},\n</code></pre> <ul> <li> <p>Toggle para mostrar/ocultar respuestas:</p> <p>Al hacer clic en una pregunta, se cambia el estado <code>isOpen</code> del item correspondiente para mostrar u ocultar la respuesta.</p> </li> </ul> <pre><code>toggleAnswer(id) {\n  const selectedItem = this.faq.find(item =&gt; item.id === id);\n  if (selectedItem) {\n    selectedItem.isOpen = !selectedItem.isOpen;\n  }\n}\n</code></pre> <ul> <li>Uso de directivas y bindings:<ul> <li><code>v-for</code> para listar las preguntas</li> <li><code>v-if</code> para mostrar la respuesta solo si est\u00e1 abierta</li> <li><code>@click</code> para manejar la interacci\u00f3n</li> <li><code>:class</code> para cambiar el estilo seg\u00fan el estado</li> </ul> </li> </ul> <pre><code>&lt;div\n  v-for=\"item in faq\"\n  :key=\"item.id\"\n  class=\"faq-item p-3 mb-3 rounded\"\n  @click=\"toggleAnswer(item.id)\"\n  :class=\"{ 'open': item.isOpen }\"\n&gt;\n  &lt;div class=\"d-flex justify-content-between align-items-center faq-question\"&gt;\n    &lt;h4 class=\"mb-0\"&gt;{{ item.question }}&lt;/h4&gt;\n    &lt;i :class=\"['fas', item.isOpen ? 'fa-chevron-up' : 'fa-chevron-down']\" class=\"faq-icon\"&gt;&lt;/i&gt;\n  &lt;/div&gt;\n  &lt;div v-if=\"item.isOpen\" class=\"faq-answer mt-2\"&gt;\n    {{ item.answer }}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"dew/#postsviewvue","title":"<code>PostsView.vue</code>","text":"<p>Este componente muestra una lista filtrable de posts obtenidos desde un backend Django usando Axios.</p> <p>Se utiliza un dropdown para seleccionar la categor\u00eda y filtrar los posts mostrados. Los posts se visualizan en tarjetas mediante el componente hijo <code>CardPost</code>.</p>"},{"location":"dew/#funcionalidades-principales_1","title":"Funcionalidades principales","text":"<ul> <li> <p>Carga inicial de posts:</p> <p>Al montar el componente, se cargan todos los posts disponibles desde la API.</p> </li> </ul> <pre><code>async getPosts() {\n  try {\n    const response = await axios.get('/api/v1/posts/');\n    this.posts = response.data;\n    this.filteredPosts = this.posts;\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n  }\n},\nmounted() {\n  this.getPosts();\n  document.title = 'Posts | TangerineMess';\n},\n</code></pre> <ul> <li> <p>Filtrado por categor\u00eda:</p> <p>Al seleccionar una categor\u00eda en el dropdown, se consulta la API con un par\u00e1metro para filtrar posts y actualizar la lista visible.</p> </li> </ul> <pre><code>async filterByCategory() {\n  try {\n    const response = await axios.get('/api/v1/posts/', {\n      params: { category: this.selectedCategory },\n    });\n    this.filteredPosts = response.data;\n  } catch (error) {\n    console.error('Error fetching filtered posts:', error);\n  }\n},\n\nselectCategory(code) {\n  if (this.selectedCategory !== code) {\n    this.selectedCategory = code;\n    this.filterByCategory();\n  }\n},\n</code></pre> <ul> <li> <p>Renderizado con <code>v-for</code> y bindings:</p> <p>Se muestran tarjetas para cada post filtrado, pasando props con informaci\u00f3n relevante.</p> </li> </ul> <pre><code>&lt;div class=\"row g-4 mt-5\"&gt;\n  &lt;div class=\"col-12 col-md-6 col-lg-4\" v-for=\"post in filteredPosts\" :key=\"post.id\"&gt;\n    &lt;CardPost\n      :title=\"post.title\"\n      :excerpt=\"post.summary\"\n      :date=\"formatDate(post.created_at)\"\n      :genre=\"post.category_display\"\n      :image=\"getImageUrl(post.images?.[0]?.image)\"\n      :slug=\"post.slug\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Transformaci\u00f3n y formato de datos:<ul> <li>M\u00e9todo para formatear fechas a un estilo corto y claro.</li> <li>M\u00e9todo para construir URLs completas de im\u00e1genes o usar un placeholder.</li> </ul> </li> </ul> <pre><code>formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = date.toLocaleString('default', { month: 'short' }).toUpperCase();\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n},\n\ngetImageUrl(imagePath) {\n  return imagePath ? `http://localhost:8000${imagePath}` : 'https://via.placeholder.com/300x200';\n},\n</code></pre>"},{"location":"dew/#postdetailvue","title":"<code>PostDetail.vue</code>","text":"<p>Este componente muestra los detalles completos de un post espec\u00edfico, recuperando los datos del backend mediante el par\u00e1metro <code>slug</code> de la URL.</p>"},{"location":"dew/#funcionalidades-principales_2","title":"Funcionalidades principales","text":"<ul> <li> <p>Carga de datos seg\u00fan slug de ruta:</p> <p>En <code>created()</code>, se obtiene el post correspondiente con el slug extra\u00eddo del router.</p> </li> </ul> <pre><code>fetchPost() {\n  const slug = this.$route.params.slug;\n  axios\n    .get(`/api/v1/posts/${slug}/`)\n    .then((response) =&gt; {\n      this.post = response.data;\n    })\n    .catch((error) =&gt; {\n      console.error('Error al obtener los detalles del post:', error);\n    });\n},\ncreated() {\n  this.fetchPost();\n},\n</code></pre> <ul> <li> <p>Renderizado condicional:</p> <p>Mientras no se haya cargado el post, se muestra un texto de \"Cargando...\". Cuando est\u00e1 listo, se muestra el contenido completo.</p> </li> </ul> <pre><code>&lt;div v-if=\"post\" class=\"container-wide py-5\" id=\"container\"&gt;\n  &lt;div class=\"text-center mb-4\"&gt;\n    &lt;h1 class=\"text-primary\"&gt;{{ post.title }}&lt;/h1&gt;\n    &lt;p class=\"text-muted date-large\"&gt;{{ formatDate(post.created_at) }}&lt;/p&gt;\n  &lt;/div&gt;\n  ...\n&lt;/div&gt;\n&lt;div v-else&gt;\n  &lt;p class=\"text-center\"&gt;Cargando...&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>Visualizaci\u00f3n de im\u00e1genes:</p> <p>Se muestra una imagen principal fija y, si hay m\u00e1s im\u00e1genes, se muestran como miniaturas debajo.</p> </li> </ul> <pre><code>&lt;div v-if=\"post.images &amp;&amp; post.images.length &gt; 0\" class=\"text-center mb-4\"&gt;\n  &lt;img\n    :src=\"getImageUrl(post.images[0].image)\"\n    alt=\"Imagen del post\"\n    class=\"img-post-main rounded-3\"\n    draggable=\"false\"\n  /&gt;\n&lt;/div&gt;\n\n&lt;div v-if=\"post.images &amp;&amp; post.images.length &gt; 1\" class=\"d-flex justify-content-center flex-wrap mb-4 gap-3\"&gt;\n  &lt;div v-for=\"(image, index) in post.images.slice(1)\" :key=\"index\" class=\"col-md-4 mb-3\"&gt;\n    &lt;img :src=\"getImageUrl(image.image)\" alt=\"Imagen adicional\" class=\"img-fluid rounded-3 img-post\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>Formato personalizado de fecha:</p> <p>Para mostrar la fecha en formato local y con horas.</p> </li> </ul> <pre><code>formatDate(dateString) {\n  const options = {\n    day: '2-digit',\n    month: 'short',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false,\n  };\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('es-ES', options).format(date).replace(',', '');\n},\n</code></pre> <ul> <li> <p>Bot\u00f3n para volver a la lista de posts:</p> <p>Usa un componente <code>SolidButton</code> con routing para facilitar la navegaci\u00f3n.</p> </li> </ul> <pre><code>&lt;SolidButton\n  text=\"Volver a la lista de posts\"\n  iconClass=\"fas fa-arrow-left\"\n  routeTo=\"/posts\"\n/&gt;\n</code></pre>"},{"location":"dew/#productvue","title":"<code>Product.vue</code>","text":"<p>Este componente muestra la p\u00e1gina de detalle de un producto con im\u00e1genes, opciones seleccionables, cantidad y posibilidad de a\u00f1adirlo al carrito. Incluye una galer\u00eda modal para ver im\u00e1genes ampliadas.</p>"},{"location":"dew/#funcionalidades-principales_3","title":"Funcionalidades principales","text":"<ul> <li> <p>Carga de producto por par\u00e1metros de URL:</p> <p>En el <code>mounted()</code>, se obtiene el producto desde la API REST usando los slugs de categor\u00eda y producto de la ruta.</p> </li> </ul> <pre><code>async getProduct() {\n  const store = useMainStore();\n  store.setIsLoading(true);\n  const category_slug = this.$route.params.category_slug;\n  const product_slug = this.$route.params.product_slug;\n\n  try {\n    const response = await axios.get(\n      `/api/v1/products/${category_slug}/${product_slug}`\n    );\n    this.product = response.data;\n    document.title = this.product.name + ' | TangerineMess';\n    this.displayedPrice = parseFloat(this.product.price);\n\n    if (this.product.options &amp;&amp; this.product.options.length &gt; 0) {\n      this.selectedOption = this.product.options[0];\n      this.updatePrice();\n    }\n  } catch (error) {\n    console.error(error);\n  } finally {\n    store.setIsLoading(false);\n  }\n},\nmounted() {\n  this.getProduct();\n},\n</code></pre> <ul> <li>Visualizaci\u00f3n de im\u00e1genes y galer\u00eda modal:<ul> <li>Imagen principal con zoom al hacer clic.</li> <li>Miniaturas de otras im\u00e1genes que abren la galer\u00eda.</li> <li>Modal con navegaci\u00f3n entre im\u00e1genes (anterior, siguiente) y bot\u00f3n de cierre.</li> </ul> </li> </ul> <pre><code>&lt;img\n  :src=\"product.get_image\"\n  alt=\"Product Image\"\n  class=\"img-fluid rounded\"\n  style=\"max-height: 500px; object-fit: contain; cursor: zoom-in;\"\n  @click=\"openGallery({ full_image_url: product.get_image, alt_text: 'Imagen principal', id: 'main' })\"\n/&gt;\n\n&lt;div v-if=\"product.images &amp;&amp; product.images.length &gt; 0\" class=\"d-flex flex-wrap gap-2 mt-3 justify-content-center\"&gt;\n  &lt;div v-for=\"img in product.images\" :key=\"img.id\" style=\"width: 48%;\"&gt;\n    &lt;img\n      :src=\"img.full_image_url\"\n      :alt=\"img.alt_text || 'Imagen adicional'\"\n      class=\"img-fluid rounded\"\n      style=\"cursor: zoom-in; object-fit: cover; max-height: 180px; width: 100%;\"\n      @click=\"openGallery(img)\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div v-if=\"galleryOpen\" class=\"gallery-modal\" @click.self=\"closeGallery\"&gt;\n  &lt;button class=\"btn-close btn-close-white gallery-close-btn\" @click=\"closeGallery\"&gt;&lt;/button&gt;\n  &lt;img :src=\"currentGalleryImage.full_image_url\" :alt=\"currentGalleryImage.alt_text || 'Imagen galer\u00eda'\" class=\"gallery-image\" /&gt;\n  &lt;button class=\"gallery-nav prev\" @click.stop=\"prevImage\"&gt;&amp;#10094;&lt;/button&gt;\n  &lt;button class=\"gallery-nav next\" @click.stop=\"nextImage\"&gt;&amp;#10095;&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>Selecci\u00f3n de opciones del producto:</p> <p>Si el producto tiene opciones (e.g., tama\u00f1o, color), se muestran en un select. Al cambiar la opci\u00f3n, se actualiza el precio mostrado.</p> </li> </ul> <pre><code>&lt;div v-if=\"product.options &amp;&amp; product.options.length &gt; 0\" class=\"mb-3\"&gt;\n  &lt;label for=\"product-option-select\" class=\"form-label\"&gt;Opciones&lt;/label&gt;\n  &lt;select\n    id=\"product-option-select\"\n    class=\"form-select\"\n    v-model=\"selectedOption\"\n    @change=\"onOptionChange\"\n  &gt;\n    &lt;option v-for=\"option in product.options\" :key=\"option.id\" :value=\"option\"&gt;\n      {{ option.name }} ({{ parseFloat(option.additional_price).toFixed(2) }}\u20ac)\n    &lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>Cantidad con botones + / - y validaci\u00f3n:</p> <p>El usuario puede modificar la cantidad con los botones o escribiendo directamente. No permite cantidades menores que 1.</p> </li> </ul> <pre><code>&lt;div class=\"mb-3\"&gt;\n  &lt;label class=\"form-label\"&gt;Cantidad&lt;/label&gt;\n  &lt;div class=\"input-group quantity-input\"&gt;\n    &lt;button class=\"btn quantity-btn\" @click=\"quantity &gt; 1 &amp;&amp; quantity--\"&gt;\n      &lt;i class=\"fas fa-minus\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n    &lt;input\n      type=\"number\"\n      class=\"form-control text-center quantity-field\"\n      min=\"1\"\n      v-model.number=\"quantity\"\n    /&gt;\n    &lt;button class=\"btn quantity-btn\" @click=\"quantity++\"&gt;\n      &lt;i class=\"fas fa-plus\"&gt;&lt;/i&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li> <p>A\u00f1adir al carrito y notificaci\u00f3n (toast):</p> <p>Se crea un objeto con el producto seleccionado, cantidad y opci\u00f3n elegida, y se a\u00f1ade al store global. Luego se muestra un toast de confirmaci\u00f3n que desaparece tras 2 segundos o al cerrarlo manualmente.</p> </li> </ul> <pre><code>addToCart() {\n  if (isNaN(this.quantity) || this.quantity &lt; 1) {\n    this.quantity = 1;\n  }\n\n  const item = {\n    product: {\n      ...this.product,\n      selectedOption: this.selectedOption,\n      price: this.selectedOption\n        ? parseFloat(this.selectedOption.additional_price)\n        : parseFloat(this.product.price),\n      totalWeight: this.selectedOption\n        ? parseFloat(this.product.weight || 0) +\n          parseFloat(this.selectedOption.additional_weight || 0)\n        : parseFloat(this.product.weight || 0),\n    },\n    quantity: this.quantity,\n  };\n\n  const store = useMainStore();\n  store.addToCart(item);\n\n  this.showToast = true;\n\n  if (this.toastTimeoutId) clearTimeout(this.toastTimeoutId);\n  this.toastTimeoutId = setTimeout(() =&gt; {\n    this.showToast = false;\n  }, 2000);\n},\n</code></pre> <ul> <li>Navegaci\u00f3n de la galer\u00eda:</li> </ul> <pre><code>openGallery(img) {\n  const mainImage = {\n    full_image_url: this.product.get_image,\n    alt_text: 'Imagen principal',\n    id: 'main',\n  };\n  this.galleryImages = [mainImage, ...this.product.images];\n  this.currentGalleryIndex = this.galleryImages.findIndex(\n    i =&gt; i.id === img.id || i.full_image_url === img.full_image_url\n  );\n  this.currentGalleryImage = this.galleryImages[this.currentGalleryIndex];\n  this.galleryOpen = true;\n},\n\ncloseGallery() {\n  this.galleryOpen = false;\n  this.currentGalleryImage = null;\n  this.galleryImages = [];\n  this.currentGalleryIndex = 0;\n},\n\nnextImage() {\n  this.currentGalleryIndex = (this.currentGalleryIndex + 1) % this.galleryImages.length;\n  this.currentGalleryImage = this.galleryImages[this.currentGalleryIndex];\n},\n\nprevImage() {\n  this.currentGalleryIndex = (this.currentGalleryIndex - 1 + this.galleryImages.length) % this.galleryImages.length;\n  this.currentGalleryImage = this.galleryImages[this.currentGalleryIndex];\n},\n</code></pre> <ul> <li> <p>Bot\u00f3n para volver a la lista de productos:</p> <p>Usa un componente <code>SolidButton</code> con routing hacia <code>/store</code>.</p> </li> </ul> <pre><code>&lt;SolidButton\n  text=\"Volver a la lista de productos\"\n  iconClass=\"fas fa-arrow-up\"\n  routeTo=\"/store\"\n/&gt;\n</code></pre>"},{"location":"dew/#mainstorejs","title":"<code>mainStore.js</code>","text":"<p>Este store es el coraz\u00f3n de la gesti\u00f3n del estado global en tu aplicaci\u00f3n usando Pinia. B\u00e1sicamente, aqu\u00ed guardas y manejas cosas esenciales como:</p> <ul> <li>El carrito de compras (<code>cart</code>),</li> <li>El estado de autenticaci\u00f3n del usuario (<code>isAuthenticated</code>, <code>token</code>, <code>username</code>),</li> <li>El estado de carga (<code>isLoading</code>).</li> </ul>"},{"location":"dew/#1-estado-state","title":"1. Estado (<code>state</code>)","text":"<p>El estado inicial guarda:</p> <ul> <li><code>cart</code>: Un objeto con un array <code>items</code> donde vas almacenando los productos a\u00f1adidos al carrito.</li> <li><code>isAuthenticated</code>: Para saber si el usuario est\u00e1 logueado o no.</li> <li><code>token</code>: El token de autenticaci\u00f3n JWT o similar.</li> <li><code>username</code>: El nombre del usuario conectado, para manejar datos espec\u00edficos, por ejemplo, el carrito por usuario.</li> <li><code>isLoading</code>: Para mostrar indicadores de carga en la UI cuando est\u00e1s esperando respuestas de APIs o procesos.</li> </ul> <pre><code>state: () =&gt; ({\n  cart: { items: [] },\n  isAuthenticated: false,\n  token: '',\n  isLoading: false,\n  username: ''\n}),\n</code></pre>"},{"location":"dew/#2-getters","title":"2. Getters","text":"<p>Son como propiedades calculadas que te permiten obtener datos derivados del estado de forma sencilla y reactiva.</p> <ul> <li><code>cartTotalLength</code>: Suma total de unidades que hay en el carrito.</li> <li><code>cartTotalPrice</code>: Precio total acumulado de todos los productos en el carrito.</li> </ul> <pre><code>getters: {\n  cartTotalLength(state) {\n    return state.cart.items.reduce((acc, item) =&gt; acc + item.quantity, 0)\n  },\n  cartTotalPrice(state) {\n    return state.cart.items.reduce(\n      (acc, item) =&gt; acc + item.quantity * item.product.price,\n      0\n    )\n  }\n}\n</code></pre> <p>As\u00ed, por ejemplo, cuando quieras mostrar el total de productos o el total a pagar, solo llamas a estas propiedades sin tener que recalcular a mano.</p>"},{"location":"dew/#3-actions","title":"3. Actions","text":"<p>Aqu\u00ed est\u00e1n todas las funciones que modifican el estado, que tambi\u00e9n pueden hacer operaciones as\u00edncronas o l\u00f3gicas complejas.</p> <ul> <li> <p>initializeStore:</p> <p>Al iniciar la app, esta funci\u00f3n carga el estado guardado en <code>localStorage</code>.</p> <p>Por ejemplo, recupera el token, el usuario y el carrito asociado a ese usuario.</p> </li> </ul> <pre><code>initializeStore() {\n  const token = localStorage.getItem('token')\n  if (token) {\n    this.token = token\n    this.isAuthenticated = true\n  } else {\n    this.token = ''\n    this.isAuthenticated = false\n  }\n\n  const storedUsername = localStorage.getItem('username')\n  if (storedUsername) {\n    this.username = storedUsername\n  }\n\n  const cartKey = this.username ? `cart_${this.username}` : 'cart'\n  const storedCart = localStorage.getItem(cartKey)\n  this.cart = storedCart ? JSON.parse(storedCart) : { items: [] }\n},\n</code></pre> <ul> <li> <p>addToCart:</p> <p>A\u00f1ade un producto al carrito. Si el producto ya est\u00e1 (considerando la opci\u00f3n seleccionada), solo aumenta la cantidad. Luego actualiza el <code>localStorage</code>.</p> </li> </ul> <pre><code>addToCart(item) {\n  const existing = this.cart.items.find(i =&gt;\n    i.product.id === item.product.id &amp;&amp;\n    JSON.stringify(i.product.selectedOption) === JSON.stringify(item.product.selectedOption)\n  )\n\n  if (existing) {\n    existing.quantity += item.quantity\n  } else {\n    this.cart.items.push(item)\n  }\n\n  const cartKey = this.username ? `cart_${this.username}` : 'cart'\n  localStorage.setItem(cartKey, JSON.stringify(this.cart))\n},\n</code></pre> <ul> <li> <p>removeFromCart:</p> <p>Elimina un producto del carrito (tambi\u00e9n compara opciones para distinguir productos iguales con diferentes opciones).</p> </li> <li> <p>clearCart:</p> <p>Vac\u00eda el carrito y sincroniza <code>localStorage</code>.</p> </li> <li> <p>setToken, removeToken, setUsername, setIsLoading:</p> <p>M\u00e9todos para actualizar estados relacionados con la sesi\u00f3n y la carga.</p> </li> <li> <p>updateLocalStorageCart:</p> <p>Solo para sincronizar el carrito en <code>localStorage</code> cuando se quiera sin modificar el estado.</p> </li> </ul>"},{"location":"dew/#uso-tipico","title":"Uso t\u00edpico","text":"<p>En la aplicaci\u00f3n, cuando el usuario a\u00f1ade algo al carrito, se llama a:</p> <pre><code>store.addToCart({ product: productoSeleccionado, quantity: cantidad })\n</code></pre> <p>Y cuando la aplicaci\u00f3n arranca, cargas el estado guardado con:</p> <pre><code>store.initializeStore()\n</code></pre>"},{"location":"dew/#router","title":"Router:","text":"<p>Para la navegaci\u00f3n dentro de mi aplicaci\u00f3n, utilizo Vue Router 4 configurado con el modo historial (<code>createWebHistory</code>) para que las URLs se vean limpias, sin el t\u00edpico <code>#</code>.</p> <p>He definido todas las rutas necesarias para las distintas vistas, como la p\u00e1gina principal (<code>Home</code>), la tienda (<code>Store</code>), los productos, el blog, el carrito, y muchas otras. Cada ruta est\u00e1 asociada a un componente Vue en formato Single File Component (SFC).</p> <p>Adem\u00e1s, algunas rutas requieren que el usuario est\u00e9 autenticado para acceder (por ejemplo, \u201cMi cuenta\u201d y el proceso de \u201cCheckout\u201d). Para esto, utilizo el campo <code>meta: { requireLogin: true }</code> dentro de las rutas que deben estar protegidas.</p> <p>Para controlar el acceso, implemento un guard global con <code>router.beforeEach</code>, que antes de cada cambio de ruta revisa si la ruta requiere login y si el usuario est\u00e1 autenticado. Esto lo verifico consultando el estado de autenticaci\u00f3n desde la store principal (Pinia). Si no est\u00e1 autenticado, redirijo al usuario a la p\u00e1gina de login y le paso la ruta original en la query para que, una vez inicie sesi\u00f3n, pueda regresar a donde quer\u00eda ir.</p> <p>Esto me asegura que solo usuarios con sesi\u00f3n activa puedan acceder a partes privadas de la app, manteniendo una buena experiencia de usuario y seguridad.</p> <p>En resumen, con esta configuraci\u00f3n de Vue Router logro:</p> <ul> <li>Navegaci\u00f3n fluida y organizada entre las distintas vistas.</li> <li>URLs amigables y f\u00e1ciles de leer.</li> <li>Control de acceso basado en autenticaci\u00f3n, integrado con la store global.</li> <li>Uso de rutas din\u00e1micas para mostrar productos y categor\u00edas seg\u00fan la URL.</li> </ul> <p>Parte del C\u00f3digo comentado de router:</p> <pre><code>import { createRouter, createWebHistory } from 'vue-router'\nimport { useMainStore } from '../store/mainstore'\n\n// Importaci\u00f3n de las vistas (componentes) para cada ruta\nimport Home from '@/views/Home.vue'\nimport Product from '../views/Product.vue'\n// ... otras importaciones omitidas para brevedad\n\n// Definici\u00f3n de rutas\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: Home\n  },\n  {\n    path: '/store',\n    name: 'Store',\n    component: Store\n  },\n  {\n    path: '/:category_slug/:product_slug/',\n    name: 'Product',\n    component: Product\n  },\n  // Otras rutas...\n  {\n    path: '/my-account',\n    name: 'MyAccount',\n    component: MyAccount,\n    meta: { requireLogin: true }  // Ruta protegida, requiere login\n  },\n  {\n    path: '/cart/checkout',\n    name: 'Checkout',\n    component: Checkout,\n    meta: { requireLogin: true }  // Ruta protegida, requiere login\n  },\n]\n\n// Creaci\u00f3n del router con historial HTML5 (sin # en URL)\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n// Guard global antes de cada navegaci\u00f3n para proteger rutas con requireLogin\nrouter.beforeEach((to, from, next) =&gt; {\n  const store = useMainStore()    // Accede a la store Pinia para estado global\n  store.initializeStore()         // Inicializa la store (ej. carga token/localStorage)\n\n  if (to.matched.some(record =&gt; record.meta.requireLogin) &amp;&amp; !store.isAuthenticated) {\n    // Si la ruta requiere login y el usuario NO est\u00e1 autenticado, redirige a LogIn\n    next({ name: 'LogIn', query: { to: to.path } })\n  } else {\n    // Si est\u00e1 autenticado o la ruta no requiere login, contin\u00faa normalmente\n    next()\n  }\n})\n\nexport default router\n</code></pre>"},{"location":"dew/#tests","title":"Tests","text":"<p>Para asegurarme de que las partes m\u00e1s importantes de la aplicaci\u00f3n funcionen correctamente, he implementado algunos tests unitarios con Jest y @vue/test-utils. Estos tests me ayudan a validar el comportamiento esperado de los componentes clave como el login, el formulario de contacto y el checkout.</p>"},{"location":"dew/#login","title":"Login","text":"<p>El test del login se encarga de comprobar que el formulario se renderiza correctamente y que, al hacer submit, se llama al m\u00e9todo de autenticaci\u00f3n del store. Tambi\u00e9n incluye un caso en el que simulo un error de login para asegurarme de que se muestra un mensaje apropiado si las credenciales son incorrectas.</p>"},{"location":"dew/#contacto","title":"Contacto","text":"<p>Aqu\u00ed testeo el formulario de contacto que se encuentra en la secci\u00f3n \"\u00a1Hablemos!\". El objetivo principal es asegurarme de que:</p> <ul> <li>Se puede enviar el formulario con datos v\u00e1lidos.</li> <li>Se muestra un mensaje de \u00e9xito si la petici\u00f3n se completa correctamente.</li> <li>En caso de error (por ejemplo, si falla la conexi\u00f3n con la API), se notifica adecuadamente al usuario.</li> <li>Adem\u00e1s, el formulario se limpia despu\u00e9s de enviarlo con \u00e9xito.</li> </ul>"},{"location":"dew/#checkout","title":"Checkout","text":"<p>En el checkout, me enfoqu\u00e9 en testear el flujo m\u00e1s cr\u00edtico: que los campos obligatorios se validen correctamente antes de continuar. El test comprueba que:</p> <ul> <li>Si falta alg\u00fan campo importante (nombre, email, direcci\u00f3n...), se muestran errores y no se contin\u00faa con la petici\u00f3n a Stripe.</li> <li>Stripe no se ejecuta si hay errores de validaci\u00f3n.</li> <li>(M\u00e1s adelante podr\u00eda incluir un test para simular una compra exitosa con redirecci\u00f3n al \"success\").</li> </ul>"},{"location":"dor/","title":"DOR","text":""},{"location":"dor/#adaptabilidad","title":"Adaptabilidad","text":"<p>Para este proyecto he elegido una paleta de colores basada en azules y naranjas, representativos de la artista a quien est\u00e1 dedicada la web. Estos colores est\u00e1n definidos como variables CSS en un archivo separado para facilitar su uso consistente en todo el proyecto y permitir un mantenimiento sencillo:</p> <pre><code>:root {\n    --color-light-orange: #ffe2bb;\n    --color-primary: #F59300;\n    --color-secondary: #FF9100;\n    --color-secondary-hover: #cc6300;\n    --color-bg: #377AB9;\n    --color-dark-blue: #0056b3;\n    --color-darker-blue: #034184;\n    --color-darkest-blue: #1d1d35;\n    --color-warm-cream: #fffbf8;\n    --color-warmer-cream:#fdfdeb;\n    --color-yellow: #fdeaa5;\n    --color-light-blue: #81aedb;\n    --color-lighter-blue: #cbe5ff;\n    --color-grey: #838897;\n    --color-light-grey: #b8bfd3;\n  }\n</code></pre> <p>El uso de colores con buen contraste garantiza que los elementos sean f\u00e1cilmente localizables y legibles, mejorando la experiencia visual y funcional del usuario. Se han seleccionado tonos que combinan bien para destacar botones, textos y otros componentes clave.</p> <p>En cuanto a la fuente, he utilizado principalmente dos familias, Degular, y ObviouslyNarrow. La primera para textos descriptivos, y la segunda para titulares, por su car\u00e1cter alargado. Ambas son letras redondeadas. Adem\u00e1s, modifico esta seg\u00fan ayude a la legibilidad, como por ejemplo, a\u00f1adiendo la propiedad de letter-spacing en n\u00fameros o men\u00fas de navegaci\u00f3n para hacer a todo el mundo entender bien lo que est\u00e1 leyendo. En general, uso tama\u00f1os de fuente grandes para permitir a los visitantes leer sin problema.</p> <pre><code>@font-face {\n    font-family: 'Degular';\n    src: url('../fonts/DegularDisplay-Regular.otf') format('opentype');\n    font-weight: normal;\n    font-style: normal;\n  }\n    @font-face {\n    font-family: 'ObviouslyNarrow';\n    src: url('../fonts/ObviouslyNarrow-Regular.otf') format('opentype');\n    font-weight: normal;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: 'ObviouslyNarrowBold';\n    src: url('../fonts/ObviouslyNarrow-Bold.otf') format('opentype');\n    font-weight: bold;\n    font-style: bold;\n  }\n</code></pre>"},{"location":"dor/#accesibilidad-y-usabilidad","title":"Accesibilidad y Usabilidad","text":"<p>Se ha prestado especial atenci\u00f3n a la accesibilidad para asegurar que la web sea usable para la mayor cantidad de personas posible:</p> <ul> <li>Se emplean etiquetas <code>&lt;label&gt;</code> correctamente asociadas con todos los campos de formulario, facilitando el uso con lectores de pantalla y mejorando la navegaci\u00f3n por teclado.</li> <li>Todas las im\u00e1genes cuentan con atributos <code>alt</code> descriptivos, incluyendo las im\u00e1genes de productos, para ofrecer contexto a usuarios con discapacidades visuales.</li> <li>Los indicadores visuales para la interacci\u00f3n, como cambios de cursor, efectos hover en enlaces y botones, o animaciones sutiles en tarjetas, ofrecen se\u00f1ales claras sobre la interactividad de los elementos.</li> <li>La navegaci\u00f3n es clara, con botones y enlaces intuitivos, con tooltips informativos en iconos y elementos que requieren explicaci\u00f3n adicional.</li> <li>Se han implementado elementos como contadores visibles en el carrito y botones de f\u00e1cil acceso para acciones comunes (volver arriba, navegaci\u00f3n atr\u00e1s), que mejoran la experiencia del usuario.</li> <li>La interfaz es simple y consistente, reduciendo la curva de aprendizaje y haciendo que la web sea accesible para usuarios con diferentes niveles de habilidad digital.</li> <li>Utilizo toast o mensajes de informaci\u00f3n al usuario tras haber realizado acciones como a\u00f1adir al carrito, registrarse o comprar.</li> </ul>"},{"location":"dor/#diseno-responsive","title":"Dise\u00f1o Responsive","text":"<p>El dise\u00f1o es completamente responsive, adapt\u00e1ndose fluidamente a distintos tama\u00f1os y dispositivos:</p> <ul> <li>Se utiliza una combinaci\u00f3n de grid flexible (<code>flexbox</code>, CSS grid) y el sistema de columnas de Bootstrap (<code>col-12</code>, <code>col-md-6</code>, etc.) para que los componentes y las tarjetas se reorganizen y escalen correctamente en m\u00f3viles, tablets y escritorios.</li> <li>Los men\u00fas de navegaci\u00f3n se transforman en men\u00fas desplegables o hamburguesa en dispositivos m\u00f3viles para optimizar el espacio y facilitar el acceso.</li> <li>Los tama\u00f1os de fuentes y botones escalan de forma proporcional seg\u00fan el dispositivo para mantener una legibilidad \u00f3ptima y facilitar la interacci\u00f3n t\u00e1ctil.</li> <li>Las im\u00e1genes y dem\u00e1s contenidos gr\u00e1ficos se ajustan para evitar desbordamientos o distorsiones, manteniendo la coherencia visual.</li> <li>Se han incorporado media queries para modificar estilos espec\u00edficos en funci\u00f3n del ancho de pantalla, logrando un comportamiento adaptado sin sacrificar la est\u00e9tica en dispositivos grandes.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"dor/#home","title":"Home","text":"<p>En este caso, tengo un texto que se desplaza a lo largo de la pantalla, y he agregado un evento para evitar que se sobreponga en pantallas m\u00e1s peque\u00f1as, editando su ancho.</p> <p></p> <p>![image.png]assets/images/(image%206.png)</p>"},{"location":"dor/#navbar","title":"Navbar","text":"<p>Este se convierte en men\u00fa hamburguesa en dispositivos peque\u00f1os.</p> <p></p>"},{"location":"dor/#galeria","title":"Galer\u00eda:","text":"<p>Tiene etiquetas para las categor\u00edas que filtran, y estos botones activos est\u00e1n en az\u00fal.</p> <p></p> <p>Pantalla peque\u00f1a</p> <p></p> <p></p> <p>Se puede navegar entre elementos por flechas, y cerrar al darle click a la x, o cualquier parte fuera de la imagen.</p> <p>Al hacer hover, se muestra el t\u00edtulo de la imagen.</p> <p></p> <p>INFO - Sobre m\u00ed</p> <p></p> <p></p> <p></p>"},{"location":"dor/#info-comisiones","title":"INFO - Comisiones","text":"<p>Se adapta a las pantallas.</p> <p></p> <p></p> <p></p> <p>Info - Eventos</p> <p></p> <p></p> <p>Info - Preguntas y Respuestas</p> <p>Las preguntas desplegadas cambian de color e icono.</p> <p></p> <p></p> <p>Contacto</p> <p></p> <p></p> <p></p> <p>Tiene tooltip para indicar el significado del icono.</p> <p>Blog</p> <p></p> <p></p> <p></p> <p></p> <p>Blog/post</p> <p></p> <p></p> <p>Login Modal</p> <p>F\u00e1cil de abrir y cerrar, opaca el fondo de la p\u00e1gina. Contiene texto en los inputs para especificar qu\u00e9 debe escribir el usuario.</p> <p></p> <p></p> <p>M\u00f3vil:</p> <p></p> <p></p> <p>Mi cuenta</p> <p></p> <p></p> <p>Carrito:</p> <p>Mensajes explican el estado del carrito si no hay a\u00f1adidos</p> <p></p> <p></p> <p></p>"},{"location":"dor/#caja-desglose-de-pedido","title":"Caja. Desglose de pedido","text":"<p>La tienda</p> <p></p> <p>Animaci\u00f3n en la que se amplia el tama\u00f1o de la tarjeta y animaci\u00f3n de l\u00ednea bajo el t\u00edtulo.</p> <p>Perm\u00edte hacer b\u00fasquedas claras.</p> <p></p> <p></p> <p></p> <p>Vista m\u00f3vil:</p> <p></p> <p></p>"},{"location":"dpl/","title":"DPL","text":""},{"location":"dpl/#explicacion-detallada-paso-a-paso-del-despliegue-con-gunicorn-supervisor-nginx-y-certbot-en-ubuntu","title":"Explicaci\u00f3n detallada paso a paso del despliegue con Gunicorn, Supervisor, Nginx y Certbot en Ubuntu","text":"<p>Me he informado y he explorado opciones y maneras de despliegue. He elegido digitalocean.</p> <p>En primer lugar, cre\u00e9 un Droplet tras registrarme, eligiendo un plan de acuerdo a mis necesidades. Eleg\u00ed el m\u00e1s sencillo.</p> <p></p> <p></p> <p>Y comprar un dominio, para lo que eleg\u00ed namecheap, pues como el nombre indica, es econ\u00f3mico. Lo conect\u00e9 con la IP del droplet de digitalocean.</p> <p></p>"},{"location":"dpl/#1-conectarse-al-servidor-por-ssh","title":"1. Conectarse al servidor por SSH","text":"<pre><code>ssh root@178.128.35.47\n</code></pre> <ul> <li>Te conectas al servidor remoto usando el usuario root.</li> <li>La IP es la del servidor en DigitalOcean (o similar).</li> <li>Se te pedir\u00e1 la contrase\u00f1a.</li> </ul>"},{"location":"dpl/#2-actualizar-paquetes-del-sistema","title":"2. Actualizar paquetes del sistema","text":"<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre> <ul> <li><code>update</code>: actualiza la lista de paquetes disponibles.</li> <li><code>upgrade</code>: instala las actualizaciones disponibles para paquetes ya instalados.</li> <li>Mantiene el sistema seguro y con las \u00faltimas versiones.</li> </ul>"},{"location":"dpl/#3-instalar-software-necesario-para-el-proyecto","title":"3. Instalar software necesario para el proyecto","text":"<pre><code>sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx\nsudo apt install certbot python3-certbot-nginx\n</code></pre> <ul> <li><code>python3-pip</code>: gestor de paquetes Python.</li> <li><code>python3-dev</code>: herramientas para compilar paquetes Python con extensiones nativas.</li> <li><code>libpq-dev</code>: librer\u00edas para PostgreSQL, necesarias para la conexi\u00f3n desde Python.</li> <li><code>postgresql</code>, <code>postgresql-contrib</code>: base de datos PostgreSQL y herramientas adicionales.</li> <li><code>nginx</code>: servidor web que actuar\u00e1 como proxy inverso.</li> <li><code>certbot</code> y <code>python3-certbot-nginx</code>: para obtener y gestionar certificados SSL de Let\u2019s Encrypt.</li> </ul>"},{"location":"dpl/#4-crear-base-de-datos-y-usuario-en-postgresql","title":"4. Crear base de datos y usuario en PostgreSQL","text":"<pre><code>sudo -u postgres psql\n</code></pre> <ul> <li>Accedemos al prompt de PostgreSQL con usuario administrador <code>postgres</code>.</li> </ul> <p>Dentro de PostgreSQL:</p> <pre><code>CREATE DATABASE tangy;\nCREATE USER tangyuser WITH PASSWORD 'tangypassword';\nALTER ROLE tangyuser SET client_encoding TO 'utf8';\nGRANT ALL PRIVILEGES ON DATABASE tangy TO tangyuser;\n\\q\n</code></pre> <ul> <li>Creamos la base de datos llamada <code>tangy</code> para el proyecto.</li> <li>Creamos un usuario <code>tangyuser</code> con contrase\u00f1a para conectarse a la DB.</li> <li>Configuramos la codificaci\u00f3n UTF-8 para manejar acentos y caracteres.</li> <li>Le damos todos los permisos sobre la base de datos.</li> </ul>"},{"location":"dpl/#5-instalar-herramientas-para-python-y-entornos-virtuales","title":"5. Instalar herramientas para Python y entornos virtuales","text":"<pre><code>sudo -H pip3 install --upgrade pip\nsudo -H pip3 install --virtualenv pip\nsudo apt install python3-venv python3-pip\n</code></pre> <ul> <li>Actualizamos <code>pip</code> (gestor de paquetes Python).</li> <li>Instalamos virtualenv para crear entornos aislados.</li> <li>Instalamos el paquete <code>python3-venv</code> para crear entornos virtuales con <code>venv</code>.</li> </ul>"},{"location":"dpl/#6-crear-estructura-de-carpetas-y-usuarios-para-la-app","title":"6. Crear estructura de carpetas y usuarios para la app","text":"<pre><code>mkdir -p /webapps/tangy\ncd /webapps/tangy\n\nsudo groupadd --system webapps\nsudo useradd --system --gid webapps --shell /bin/bash --home /webapps/tangy tangy\n</code></pre> <ul> <li>Creamos carpeta <code>/webapps/tangy</code> donde vivir\u00e1 la app.</li> <li>Creamos grupo de sistema <code>webapps</code> para manejar permisos.</li> <li>Creamos usuario sistema <code>tangy</code> con ese grupo, con home en la carpeta anterior, para correr la app con menos privilegios que root (por seguridad).</li> </ul>"},{"location":"dpl/#7-crear-entorno-virtual-python-para-el-proyecto","title":"7. Crear entorno virtual Python para el proyecto","text":"<pre><code>python3 -m venv environment_3_8_2\nsource environment_3_8_2/bin/activate\npip install --upgrade pip\n</code></pre> <ul> <li>Creamos entorno virtual con Python 3.8.2 (o el que uses).</li> <li>Activamos el entorno para usar sus paquetes aislados.</li> <li>Actualizamos <code>pip</code> dentro del entorno.</li> </ul>"},{"location":"dpl/#8-preparar-archivo-con-dependencias-del-proyecto","title":"8. Preparar archivo con dependencias del proyecto","text":"<p>En tu entorno local (donde desarrollas):</p> <pre><code>pip freeze &gt; req.txt\n</code></pre> <ul> <li>Esto genera una lista de todas las librer\u00edas usadas con sus versiones.</li> </ul> <p>Ejemplo de dependencias (tu archivo <code>req.txt</code>):</p> <pre><code>asgiref==3.8.1\ncertifi==2025.1.31\ncffi==1.17.1\ncharset-normalizer==3.4.1\ncryptography==44.0.2\ndefusedxml==0.7.1\nDjango==5.2\ndjango-cors-headers==4.7.0\ndjango-rest-framework==0.1.0\ndjangorestframework==3.16.0\ndjangorestframework_simplejwt==5.5.0\ndjoser==2.3.1\nidna==3.10\noauthlib==3.2.2\npillow==11.2.1\npycparser==2.22\nPyJWT==2.9.0\npython3-openid==3.2.0\nrequests==2.32.3\nrequests-oauthlib==2.0.0\nsocial-auth-app-django==5.4.3\nsocial-auth-core==4.5.6\nsqlparse==0.5.3\nstripe==12.0.0\ntyping_extensions==4.13.2\ntzdata==2025.2\nurllib3==2.4.0\n</code></pre>"},{"location":"dpl/#9-subir-dependencias-al-servidor-y-instalar","title":"9. Subir dependencias al servidor y instalar","text":"<p>En servidor:</p> <pre><code>touch req.txt\nvi req.txt\n# Pegar el contenido del archivo req.txt aqu\u00ed\n:wq  # para guardar y salir de vi\n\npip install -r req.txt\npip install psycopg2-binary\n</code></pre> <ul> <li>Creamos el archivo <code>req.txt</code> con todas las dependencias del proyecto.</li> <li>Instalamos todas las librer\u00edas.</li> <li><code>psycopg2-binary</code> es el adaptador para PostgreSQL en Python.</li> </ul>"},{"location":"dpl/#10-subir-proyecto-django-al-servidor","title":"10. Subir proyecto Django al servidor","text":"<p>En local:</p> <pre><code>cd ..\nzip -r djackets_tangy.zip tangy_django\nscp djackets_tangy.zip root@178.128.35.47:.\n</code></pre> <ul> <li>Salimos de la carpeta del proyecto y comprimimos todo.</li> <li>Subimos el zip al servidor con <code>scp</code>.</li> </ul> <p>En servidor:</p> <pre><code>apt install unzip\nunzip djackets_tangy.zip\nrm djackets_tangy.zip\n\nls -larth\nchown -R tangy:webapps .\n</code></pre> <ul> <li>Instalamos unzip para descomprimir el zip.</li> <li>Descomprimimos y borramos el zip para ahorrar espacio.</li> <li>Cambiamos permisos para que el usuario tangy y grupo webapps sean due\u00f1os de los archivos.</li> </ul>"},{"location":"dpl/#11-configurar-django-para-produccion","title":"11. Configurar Django para producci\u00f3n","text":"<pre><code>cd tangy_django/main\n\ncp settings.py settingsprod.py\nvi settingsprod.py\n</code></pre> <ul> <li>Creamos archivo <code>settingsprod.py</code> para la configuraci\u00f3n de producci\u00f3n.</li> </ul> <p>Dentro de <code>settingsprod.py</code>, configurar base de datos:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'tangy',\n        'USER': 'tangyuser',\n        'PASSWORD': 'tangypassword',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n</code></pre> <ul> <li>Configuras el acceso a la base de datos que creaste antes.</li> </ul> <p>Luego:</p> <pre><code>cd ..\ncp manage.py manageprod.py\nvi manageprod.py\n</code></pre> <ul> <li>Modifica <code>manageprod.py</code> para que use <code>settingsprod.py</code> en lugar de <code>settings.py</code> (cambia el <code>DJANGO_SETTINGS_MODULE</code>).</li> </ul>"},{"location":"dpl/#12-migrar-la-base-de-datos-y-permisos-en-postgresql","title":"12. Migrar la base de datos y permisos en PostgreSQL","text":"<pre><code>python manageprod.py makemigrations\n</code></pre> <ul> <li>Detecta cambios en los modelos Django y crea migraciones.</li> </ul> <p>Luego, en PostgreSQL:</p> <pre><code>sudo -u postgres psql\n\\c tangy\nALTER SCHEMA public OWNER TO tangyuser;\nGRANT ALL PRIVILEGES ON SCHEMA public TO tangyuser;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO tangyuser;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO tangyuser;\n\\q\n</code></pre> <ul> <li>Cambia el propietario del esquema para que el usuario tenga permisos completos.</li> </ul> <p>Finalmente:</p> <pre><code>python manageprod.py migrate\n</code></pre> <ul> <li>Aplica las migraciones, creando tablas en la base.</li> </ul>"},{"location":"dpl/#13-instalar-gunicorn-y-preparar-script-de-inicio","title":"13. Instalar Gunicorn y preparar script de inicio","text":"<pre><code>pip install gunicorn\ncd ..\nvi environment_3_8_2/bin/gunicorn_start\n</code></pre> <p>Escribir script <code>gunicorn_start</code>:</p> <pre><code>#!/bin/sh\n\nNAME='tangy_django'\nDJANGODIR=/webapps/tangy/tangy_django\nSOCKFILE=/webapps/tangy/environment_3_8_2/run/gunicorn.sock\nUSER=tangy\nGROUP=webapps\nNUM_WORKERS=3\nDJANGO_SETTINGS_MODULE=tangy_django.settingsprod\nDJANGO_WSGI_MODULE=tangy_django.wsgi\nTIMEOUT=120\n\ncd $DJANGODIR\nsource ../environment_3_8_2/bin/activate\nexport DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE\nexport PYTHONPATH=$DJANGODIR:$PYTHONPATH\n\nRUNDIR=$(dirname $SOCKFILE)\ntest -d $RUNDIR || mkdir -p $RUNDIR\n\nexec ../environment_3_8_2/bin/gunicorn ${DJANGO_WSGI_MODULE}:application \\\n--name $NAME \\\n--workers $NUM_WORKERS \\\n--timeout $TIMEOUT \\\n--user=$USER --group=$GROUP \\\n--bind=unix:$SOCKFILE \\\n--log-level=debug \\\n--log-file=-\n</code></pre> <ul> <li>Este script inicia Gunicorn con la configuraci\u00f3n correcta, usando socket Unix, usuario y grupo espec\u00edficos, con 3 trabajadores.</li> </ul> <p>Luego:</p> <pre><code>chmod +x environment_3_8_2/bin/gunicorn_start\n</code></pre> <ul> <li>Hacemos el script ejecutable.</li> </ul>"},{"location":"dpl/#14-instalar-y-configurar-supervisor-para-mantener-gunicorn-vivo","title":"14. Instalar y configurar Supervisor para mantener Gunicorn vivo","text":"<pre><code>apt install supervisor\ncd /etc/supervisor/conf.d/\ntouch tangy.conf\nvi tangy.conf\n</code></pre> <p>Escribir en <code>tangy.conf</code>:</p> <pre><code>[program:tangy_django]\ncommand = /webapps/tangy/environment_3_8_2/bin/gunicorn_start\nuser = tangy\nstdout_logfile = /webapps/tangy/environment_3_8_2/logs/supervisor.log\nredirect_stderr = true\nenvironment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8\n</code></pre> <ul> <li>Configuramos Supervisor para que controle el proceso Gunicorn y lo reinicie si falla.</li> </ul> <p>Luego:</p> <pre><code>mkdir /webapps/tangy/environment_3_8_2/logs/\n\nsupervisorctl reread\nsupervisorctl update\nsupervisorctl status\n</code></pre> <ul> <li>Recargamos Supervisor para que detecte la nueva configuraci\u00f3n, la aplique y verifiquemos el estado.</li> </ul>"},{"location":"dpl/#15-configurar-nginx-para-servir-la-app-y-hacer-proxy-a-gunicorn","title":"15. Configurar Nginx para servir la app y hacer proxy a Gunicorn","text":"<pre><code>cd /etc/nginx/sites-available\nvi apitangy.tangerinemess.com\n</code></pre> <p>Poner esta configuraci\u00f3n:</p> <pre><code>upstream tangy_app_server {\n    server unix:/webapps/tangy/environment_3_8_2/run/gunicorn.sock fail_timeout=0;\n}\n\nserver {\n    listen 80;\n    server_name tangy.tangerinemess.com;\n    return 301 https://tangy.tangerinemess.com$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tangy.tangerinemess.com;\n\n    client_max_body_size 4G;\n\n    access_log /webapps/tangy/environment_3_8_2/logs/nginx-django-access.log;\n    error_log /webapps/tangy/environment_3_8_2/logs/nginx-django-error.log;\n\n    ssl_certificate /etc/letsencrypt/live/tangy.tangerinemess.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/tangy.tangerinemess.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    location /static/ {\n        alias /webapps/tangy/environment_3_8_2/tangy_django/static/;\n    }\n\n    location /media/ {\n        alias /webapps/tangy/tangy_django/media/;\n    }\n\n    location / {\n        root /webapps/tangy/tangy_vue/dist;\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /api/ {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_pass http://tangy_app_server;\n    }\n}\n</code></pre> <ul> <li>Definimos upstream con el socket de Gunicorn.</li> <li>Redirigimos HTTP a HTTPS.</li> <li>Configuramos SSL con certificados de Let\u2019s Encrypt.</li> <li>Sirve archivos est\u00e1ticos y media directamente para optimizar.</li> <li>Sirve frontend Vue desde carpeta <code>/webapps/tangy/tangy_vue/dist</code>.</li> <li>Reenv\u00eda las peticiones que empiezan por <code>/api/</code> a Gunicorn/Django.</li> </ul> <p>Luego:</p> <pre><code>cd ../sites-enabled/\nln -s ../sites-available/apitangy.tangerinemess.com .\nls -larth\nservice nginx restart\n</code></pre> <ul> <li>Creamos enlace simb\u00f3lico para activar la configuraci\u00f3n.</li> <li>Reiniciamos nginx para aplicar cambios.</li> </ul>"},{"location":"dpl/#16-comprar-dominio-y-configurar-ssl-con-certbot","title":"16. Comprar dominio y configurar SSL con Certbot","text":"<pre><code>sudo certbot -d tangy.tangerinemess.com\nservice nginx restart\n</code></pre> <ul> <li>Certbot obtiene certificado gratuito para tu dominio.</li> <li>Reinicia nginx para aplicar el certificado y habilitar HTTPS.</li> </ul> <p>Con esto tenemos Django en producci\u00f3n, con base de datos PostgreSQL, servidor Gunicorn gestionado por Supervisor, y nginx como proxy inverso con SSL.</p>"},{"location":"dpl/#configuracion-de-seguridad-y-dominio-en-django-settingsprodpy","title":"Configuraci\u00f3n de seguridad y dominio en Django (<code>settingsprod.py</code>)","text":"<p>Archivo: <code>tangy_django/main/settingsprod.py</code></p>"},{"location":"dpl/#anadir-dominios-al-proyecto","title":"A\u00f1adir dominios al proyecto:","text":"<pre><code>ALLOWED_HOSTS = [\n    \"tangy.tangerinemess.com\",\n    \"apitangy.tangerinemess.com\",\n]\n\nCORS_ALLOWED_ORIGINS = [\n    \"https://tangy.tangerinemess.com\",\n    \"https://apitangy.tangerinemess.com\",\n]\n</code></pre>"},{"location":"dpl/#reiniciar-gunicorn-via-supervisor","title":"Reiniciar Gunicorn v\u00eda Supervisor","text":"<pre><code>supervisorctl restart tangy_django\n</code></pre>"},{"location":"dpl/#crear-superusuario-de-django","title":"Crear superusuario de Django","text":"<pre><code>source ../environment_3_8_2/bin/activate\npython manageprod.py createsuperuser\n</code></pre> <p>Sigue los pasos para configurar un usuario administrador.</p>"},{"location":"dpl/#cambiar-url-hardcodeada-en-modelos","title":"Cambiar URL hardcodeada en modelos","text":"<p>Archivo: <code>product/models.py</code></p> <p>Reemplaza cualquier IP local (como <code>http://127.0.0.1:8000</code>) por:</p> <pre><code>\"https://apitangy.tangerinemess.com\"\n</code></pre> <p>Despu\u00e9s:</p> <pre><code>supervisorctl restart tangy_django\n</code></pre>"},{"location":"dpl/#despliegue-del-frontend-vue","title":"Despliegue del Frontend Vue","text":""},{"location":"dpl/#configurar-el-endpoint-del-backend-en-vue","title":"Configurar el endpoint del backend en Vue","text":"<p>Archivo: <code>src/main.js</code></p> <pre><code>axios.defaults.baseURL = \"https://apitangy.tangerinemess.com\";\n</code></pre>"},{"location":"dpl/#compilar-y-empaquetar-vue","title":"Compilar y empaquetar Vue","text":"<pre><code>npm run build\nzip -r dist.zip dist\n</code></pre>"},{"location":"dpl/#enviar-el-build-al-servidor-remoto","title":"Enviar el build al servidor remoto","text":"<pre><code>scp dist.zip root@178.128.35.47\n</code></pre>"},{"location":"dpl/#desempaquetar-en-el-servidor","title":"Desempaquetar en el servidor","text":"<pre><code>cp /root/dist.zip .\nunzip dist.zip\n\nmkdir tangy_vue\nmv dist tangy_vue/dist\n\nchown -R tangy:webapps .\n</code></pre>"},{"location":"dpl/#configuracion-del-servidor-nginx-para-el-frontend","title":"Configuraci\u00f3n del servidor NGINX para el Frontend","text":""},{"location":"dpl/#crear-archivo-de-configuracion-nginx","title":"Crear archivo de configuraci\u00f3n NGINX","text":"<pre><code>cd /etc/nginx/sites-available\ntouch tangy.tangerinemess.com\nvi tangy.tangerinemess.com\n</code></pre> <p>Contenido:</p> <pre><code>server {\n    listen 80;\n    server_name tangy.tangerinemess.com;\n    return 301 https://tangy.tangerinemess.com$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tangy.tangerinemess.com;\n\n    client_max_body_size 4G;\n\n    error_log  /webapps/tangy/environment_3_8_2/logs/nginx-vue-error.log;\n    access_log /webapps/tangy/environment_3_8_2/logs/nginx-vue-access.log;\n\n    ssl_certificate /etc/letsencrypt/live/tangy.tangerinemess.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/tangy.tangerinemess.com/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n    charset utf-8;\n    root /webapps/tangy/tangy_vue/dist;\n    index index.html index.htm;\n\n    location / {\n        root /webapps/tangy/tangy_vue/dist;\n        try_files $uri /index.html;\n    }\n}\n</code></pre>"},{"location":"dpl/#activar-el-sitio-en-nginx","title":"Activar el sitio en NGINX","text":"<pre><code>cd /etc/nginx/sites-enabled\nln -s ../sites-available/tangy.tangerinemess.com .\n</code></pre>"},{"location":"dpl/#reiniciar-nginx-para-aplicar-cambios","title":"Reiniciar NGINX para aplicar cambios","text":"<pre><code>supervisorctl restart nginx\n</code></pre>"},{"location":"dpl/#verificacion-final","title":"Verificaci\u00f3n final","text":"<ul> <li>Backend en: https://apitangy.tangerinemess.com</li> <li>Frontend en: https://tangy.tangerinemess.com</li> </ul> <p>Abrir las URLs en el navegador y verifica que:</p> <ul> <li>Vue renderiza correctamente el frontend.</li> <li>Las llamadas a la API funcionan sin error de CORS o redirecci\u00f3n.</li> <li>Django Admin est\u00e1 accesible v\u00eda <code>https://apitangy.tangerinemess.com/admin/</code>.</li> </ul>"},{"location":"dsw/","title":"DSW","text":""},{"location":"dsw/#introduccion","title":"Introducci\u00f3n:","text":"<p>El backend del proyecto est\u00e1 desarrollado con Django y se encarga de gestionar la l\u00f3gica de negocio y los datos esenciales de la aplicaci\u00f3n: productos, usuarios, pedidos, publicaciones de blog, eventos, im\u00e1genes y m\u00e1s. Mediante Django REST Framework, se crean las APIs que comunican esta informaci\u00f3n con el frontend. Django facilita el desarrollo gracias a sus herramientas integradas como el sistema de administraci\u00f3n, el manejo de usuarios y su conexi\u00f3n con bases de datos.</p>"},{"location":"dsw/#librerias-usadas-en-el-backend","title":"Librer\u00edas usadas en el backend","text":"<p>El proyecto he experimentado y explorado posibilidades, descubriendo librer\u00edas nuevas que me ayudaron a aumentar la rapidez para en la creaci\u00f3n de apis.</p> <ul> <li>Django y DRF forman la base del backend y la API REST.</li> <li>djoser y simplejwt facilitan la autenticaci\u00f3n de usuarios mediante tokens JWT.</li> <li>django-cors-headers permite la comunicaci\u00f3n con el frontend en Vue configurando el acceso entre or\u00edgenes distintos.</li> <li>pillow gestiona la carga y edici\u00f3n de im\u00e1genes.</li> <li>stripe permite integrar pagos seguros en la web.</li> <li>cryptography y defusedxml refuerzan la seguridad del proyecto, protegiendo datos sensibles y evitando vulnerabilidades XML.</li> <li>Kubi - personalizar el panel de administraci\u00f3n</li> <li>Tambi\u00e9n se incluyen bibliotecas como requests, oauthlib, o social-auth.</li> </ul>"},{"location":"dsw/#aplicaciones","title":"APLICACIONES","text":"<p>Este proyecto cuenta con varias aplicaciones. Main, Post, Event, order, personal, portfolio, product, order. A continuaci\u00f3n hablar\u00e9 resumidamente de cada una de ellas.</p> <p>Cuenta con la carpeta media, donde se guardan todas las im\u00e1genes subidas al proyecto.</p>"},{"location":"dsw/#main","title":"MAIN","text":"<p>La app <code>main</code> centraliza la configuraci\u00f3n general del proyecto, como rutas, bases de datos, correo y middlewares. Incluye la configuraci\u00f3n de env\u00edo de correos mediante Gmail para facilitar la comunicaci\u00f3n en el formulario de contacto, y define los endpoints principales bajo <code>/api/v1/</code>, lo que permite escalar futuras versiones (como <code>v2</code>). Tambi\u00e9n gestiona la carga de archivos multimedia y est\u00e1tica, y define las rutas que enlazan con otras apps como <code>post</code>, <code>product</code>, <code>order</code>, etc.</p> <pre><code>from django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/v1/', include('djoser.urls')),\n    path('api/v1/', include('djoser.urls.authtoken')),\n    path('api/v1/', include('post.urls')),\n    path('api/v1/', include('product.urls')),\n    path('api/v1/', include('order.urls')),\n    path('api/v1/', include('event.urls')),\n    path('api/v1/', include('portfolio.urls')),\n    path('api/v1/', include('personal.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>Les he escrito el prefijo v1 para que no haya conflicto en caso de una nueva actualizaci\u00f3n de la api, a la que llamar\u00eda v2, ets\u2026</p> <p>Djoser: path('api/v1/', include('djoser.urls')),</p> <p>Incluye las URLs est\u00e1ndar de Djoser para manejar autenticaci\u00f3n (registro, login, logout, cambio de contrase\u00f1a, etc).</p> <p>path('api/v1/', include('djoser.urls.authtoken')),</p> <p>Incluye rutas espec\u00edficas para el token de autenticaci\u00f3n cuando usas el sistema de tokens con Django REST Framework.</p>"},{"location":"dsw/#aplicacion-post","title":"Aplicaci\u00f3n Post","text":"<p>Esta aplicaci\u00f3n gestiona publicaciones o entradas de blog, permitiendo almacenar contenido textual junto con im\u00e1genes relacionadas, organizadas en categor\u00edas definidas.</p>"},{"location":"dsw/#modelo-post","title":"Modelo <code>Post</code>","text":"<p>Representa una entrada o publicaci\u00f3n en el blog. Incluye los siguientes campos:</p> <ul> <li><code>title</code>: T\u00edtulo del post, m\u00e1ximo 256 caracteres.</li> <li><code>slug</code>: Cadena \u00fanica generada autom\u00e1ticamente a partir del t\u00edtulo para URLs amigables.</li> <li><code>content</code>: Contenido principal del post (texto libre).</li> <li><code>created_at</code>: Fecha y hora de creaci\u00f3n, asignada autom\u00e1ticamente.</li> <li><code>category</code>: Categor\u00eda del post, con opciones predefinidas (<code>Artist Alley</code>, <code>Daily Life</code>, <code>Announcement</code>, etc.).</li> </ul> <p>El m\u00e9todo <code>save()</code> sobreescrito asegura que el campo <code>slug</code> se actualice autom\u00e1ticamente usando la funci\u00f3n <code>slugify</code> con base en el t\u00edtulo, facilitando la generaci\u00f3n de URLs limpias.</p> <p>La clase <code>Meta</code> ordena los posts por fecha de creaci\u00f3n descendente para mostrar primero los m\u00e1s recientes.</p> <pre><code>class Post(models.Model):\n    class Category(models.TextChoices):\n        ARTIST_ALLEY = 'AL', 'Artist Alley'\n        DAILY_LIFE = 'DL', 'Daily Life'\n        OTHER = 'OT', 'Other'\n        ANNOUNCEMENT = 'AN', 'Announcement'\n\n    title = models.CharField(max_length=256)\n    slug = models.SlugField(unique=True)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    category = models.CharField(max_length=2, choices=Category.choices, default=Category.OTHER)\n\n    def save(self, *args, **kwargs):\n        self.slug = slugify(self.title)\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return f'/{self.slug}/'\n\n    class Meta:\n        ordering = ['-created_at']\n</code></pre>"},{"location":"dsw/#modelo-postimage","title":"Modelo <code>PostImage</code>","text":"<p>Permite asociar m\u00faltiples im\u00e1genes a un post, con los siguientes campos:</p> <ul> <li><code>post</code>: Relaci\u00f3n Many-to-One con el modelo <code>Post</code>.</li> <li><code>image</code>: Archivo de imagen que se guarda en la carpeta <code>uploads/blog_posts/</code>.</li> <li><code>caption</code>: Texto descriptivo o pie de foto, opcional.</li> </ul> <pre><code>class PostImage(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='images')\n    image = models.ImageField(upload_to='uploads/blog_posts/')\n    caption = models.CharField(max_length=256, blank=True)\n\n    def __str__(self):\n        return f\"Image for: {self.post.title}\"\n</code></pre>"},{"location":"dsw/#vistas","title":"Vistas","text":"<p>Se utilizan vistas basadas en clases (APIView) para ofrecer acceso a las publicaciones a trav\u00e9s de una API RESTful.</p> <ul> <li><code>PostList</code>: Devuelve una lista de posts, con opci\u00f3n a filtrar por categor\u00eda a trav\u00e9s de un par\u00e1metro GET <code>category</code>.</li> <li><code>PostDetail</code>: Devuelve los detalles completos de un post identificado por su <code>slug</code>.</li> </ul> <p>Ambas usan serializers para estructurar la respuesta JSON.</p> <pre><code>class PostList(APIView):\n    def get(self, request, format=None):\n        category = request.GET.get('category', None)\n        posts = Post.objects.all()\n        if category:\n            posts = posts.filter(category=category)\n        serializer = PostListSerializer(posts, many=True)\n        return Response(serializer.data)\n\nclass PostDetail(APIView):\n    def get_object(self, slug):\n        try:\n            return Post.objects.get(slug=slug)\n        except Post.DoesNotExist:\n            raise Http404\n\n    def get(self, request, slug, format=None):\n        post = self.get_object(slug)\n        serializer = PostDetailSerializer(post)\n        return Response(serializer.data)\n</code></pre>"},{"location":"dsw/#serializadores","title":"Serializadores","text":"<p>Transforman los modelos en datos JSON para la API.</p> <ul> <li><code>PostImageSerializer</code>: Serializa im\u00e1genes con su ruta y caption.</li> <li><code>PostListSerializer</code>: Resume los posts con t\u00edtulo, slug, fecha, categor\u00eda legible, resumen del contenido y lista de im\u00e1genes.</li> <li><code>PostDetailSerializer</code>: Muestra todos los detalles del post, incluyendo contenido completo e im\u00e1genes.</li> </ul> <pre><code>class PostImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PostImage\n        fields = ['image', 'caption']\n\nclass PostListSerializer(serializers.ModelSerializer):\n    summary = serializers.SerializerMethodField()\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n    images = PostImageSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'created_at', 'category', 'category_display', 'summary', 'images']\n\n    def get_summary(self, obj):\n        return ' '.join(obj.content.split()[:25]) + '...'\n\nclass PostDetailSerializer(serializers.ModelSerializer):\n    images = PostImageSerializer(many=True, read_only=True)\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'content', 'created_at', 'category', 'category_display', 'images']\n</code></pre>"},{"location":"dsw/#tests","title":"Tests","text":"<p>Se valida el comportamiento de la API para obtener la lista de posts y el detalle de un post espec\u00edfico, incluyendo la gesti\u00f3n de errores para slugs no existentes.</p> <ul> <li>Se crea un post de prueba en <code>setUp</code>.</li> <li>Se verifica que la lista de posts incluya dicho post.</li> <li>Se consulta el detalle por slug y se confirma la respuesta.</li> <li>Se prueba que un slug inexistente devuelve un error 404.</li> </ul> <pre><code>class PostAPITest(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.post = Post.objects.create(\n            title=\"Test Post\",\n            content=\"Contenido de prueba para el post.\",\n            category=Post.Category.ANNOUNCEMENT\n        )\n\n    def test_post_list(self):\n        response = self.client.get('/api/v1/posts/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertTrue(any(p['title'] == \"Test Post\" for p in response.data))\n\n    def test_post_detail(self):\n        response = self.client.get(f'/api/v1/posts/{self.post.slug}/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data['title'], \"Test Post\")\n\n    def test_post_not_found(self):\n        response = self.client.get('/api/v1/posts/slug-inexistente/')\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n</code></pre>"},{"location":"dsw/#urls","title":"URLs","text":"<p>Se definen rutas RESTful para la API de posts:</p> <pre><code>urlpatterns = [\n    path('posts/', PostList.as_view(), name='post-list'),\n    path('posts/&lt;slug:slug&gt;/', PostDetail.as_view(), name='post-detail'),\n]\n</code></pre>"},{"location":"dsw/#aplicacion-event","title":"Aplicaci\u00f3n Event","text":"<p>Esta aplicaci\u00f3n contiene el modelo UpcomingEvent representa eventos pr\u00f3ximos con detalles b\u00e1sicos para su presentaci\u00f3n.</p> <ul> <li>Campos principales:<ul> <li><code>title</code> (CharField): T\u00edtulo del evento.</li> <li><code>image</code> (ImageField): Imagen asociada al evento, guardada en la carpeta <code>uploads/events/</code>.</li> <li><code>start_date</code> (DateField): Fecha de inicio del evento.</li> <li><code>end_date</code> (DateField, opcional): Fecha de finalizaci\u00f3n, permite eventos de varios d\u00edas.</li> <li><code>location</code> (CharField): Lugar donde se realizar\u00e1 el evento.</li> <li><code>link</code> (URLField, opcional): Enlace externo relacionado con el evento (por ejemplo, p\u00e1gina oficial).</li> <li><code>location_link</code> (URLField, opcional): Enlace para la ubicaci\u00f3n (como un mapa o direcci\u00f3n web).</li> </ul> </li> <li>Comportamiento:<ul> <li>Ordena los eventos autom\u00e1ticamente por fecha de inicio (<code>start_date</code>).</li> <li>M\u00e9todo <code>is_multi_day()</code> que devuelve <code>True</code> si el evento dura m\u00e1s de un d\u00eda.</li> </ul> </li> <li>Representaci\u00f3n:<ul> <li>El m\u00e9todo <code>__str__</code> retorna el t\u00edtulo para facilitar su identificaci\u00f3n en interfaces administrativas.</li> </ul> </li> </ul> <p>Tiene una vista basada en APIView que crea un endpoint para obtener la lista completa de eventos pr\u00f3ximos. Al recibir una petici\u00f3n GET, consulta todos los registros del modelo <code>UpcomingEvent</code>, los serializa con <code>UpcomingEventSerializer</code> y devuelve los datos en formato JSON.</p> <p>La url para esta es: </p> <pre><code>path('events/', UpcomingEventList.as_view(), name='upcoming-events'),\n</code></pre> <p>Tambi\u00e9n tiene un test que crea un evento de prueba, hace una petici\u00f3n GET al endpoint <code>/events/, v</code>erifica que la respuesta es 200 OK y comprueba que el evento creado aparece en la respuesta.</p>"},{"location":"dsw/#aplicacion-portfolio","title":"Aplicaci\u00f3n Portfolio","text":"<p>Representa una entrada del portafolio.</p> <p>Modelo </p> <ul> <li><code>title</code> (CharField): T\u00edtulo de la entrada del portafolio, con un m\u00e1ximo de 255 caracteres.</li> <li><code>image</code> (ImageField): Imagen asociada a la entrada, almacenada en la carpeta <code>uploads/portfolio/</code>.</li> <li><code>category</code> (CharField): Categor\u00eda de la entrada, con opciones predefinidas: Concept Art, Animaci\u00f3n, Ilustraci\u00f3n, y Otros (por defecto).</li> <li><code>created_at</code> (DateTimeField): Fecha y hora en que se cre\u00f3 la entrada, se asigna autom\u00e1ticamente al crear el registro.</li> </ul> <p>Las entradas se ordenan por fecha de creaci\u00f3n descendente (<code>ordering = ['-created_at']</code>), mostrando primero las m\u00e1s recientes.</p> <p>Como en el caso anterior, es una aplicaci\u00f3n simple con una vista basada en APIView que obtiene una lista de registros que son serializados. Y una URL para acceder a los datos.</p> <pre><code>urlpatterns = [\n    path('portfolio/', PortfolioEntryList.as_view(), name='portfolio-list'),\n]\n</code></pre>"},{"location":"dsw/#aplicacion-personal","title":"Aplicaci\u00f3n Personal","text":"<p>Contiene modelos que gestionan la informaci\u00f3n personal, comisiones, preguntas frecuentes y contactos de la web.</p>"},{"location":"dsw/#modelo-about","title":"Modelo About","text":"<ul> <li><code>title</code> (CharField, opcional): T\u00edtulo descriptivo, puede quedar vac\u00edo.</li> <li><code>content</code> (TextField): Texto con informaci\u00f3n sobre la persona o proyecto.</li> <li><code>image</code> (ImageField, opcional): Imagen relacionada, almacenada en <code>media/about/</code>.</li> </ul> <p>Representa la secci\u00f3n \u201cAcerca de m\u00ed\u201d o informaci\u00f3n general.</p>"},{"location":"dsw/#modelo-commissions","title":"Modelo Commissions","text":"<ul> <li><code>title</code> (CharField, opcional): T\u00edtulo del servicio o comisi\u00f3n ofrecida.</li> <li><code>description</code> (TextField): Descripci\u00f3n detallada de la comisi\u00f3n.</li> <li><code>price</code> (DecimalField): Precio de la comisi\u00f3n, con hasta 10 d\u00edgitos y 2 decimales.</li> <li><code>slots_left</code> (PositiveIntegerField): N\u00famero de plazas disponibles para la comisi\u00f3n.</li> <li><code>image</code> (ImageField, opcional): Imagen ilustrativa guardada en <code>media/comissions/</code>.</li> </ul> <p>Gestiona las ofertas y disponibilidad de comisiones personalizadas.</p>"},{"location":"dsw/#modelo-faq","title":"Modelo FAQ","text":"<ul> <li><code>question</code> (CharField): Pregunta frecuente.</li> <li><code>answer</code> (TextField): Respuesta correspondiente a la pregunta.</li> </ul> <p>Modelo para mostrar las preguntas frecuentes y sus respuestas.</p>"},{"location":"dsw/#modelo-contact","title":"Modelo Contact","text":"<ul> <li><code>name</code> (CharField): Nombre del usuario que contacta.</li> <li><code>email</code> (EmailField): Correo electr\u00f3nico del usuario.</li> <li><code>message</code> (TextField): Mensaje enviado por el usuario.</li> <li><code>created_at</code> (DateTimeField): Fecha y hora en que se cre\u00f3 el contacto (registro autom\u00e1tico).</li> </ul> <p>Permite registrar los mensajes y consultas recibidas desde la secci\u00f3n de contacto.</p>"},{"location":"dsw/#vistas-apiview","title":"Vistas (APIView)","text":"<ul> <li> <p>ContactView (POST)</p> <p>Recibe nombre, email y mensaje, valida campos, guarda contacto y env\u00eda email notificando el mensaje.</p> </li> <li> <p>AboutView (GET)</p> <p>Devuelve la primera instancia de About serializada.</p> </li> <li> <p>CommissionsList (GET)</p> <p>Devuelve la lista completa de comisiones serializadas.</p> </li> <li> <p>FAQList (GET)</p> <p>Devuelve todas las preguntas frecuentes serializadas.</p> </li> </ul>"},{"location":"dsw/#serializadores_1","title":"Serializadores","text":"<p>Se basan en <code>ModelSerializer</code> y exponen todos los campos de sus modelos:</p> <p><code>AboutSerializer, CommissionsSerializer, FAQSerializer</code></p>"},{"location":"dsw/#formulario","title":"Formulario","text":"<p>ContactForm, un sencillo formulario para recibir mensajes desde el front.</p> <p>Campos: <code>name</code>, <code>email</code>, <code>message</code> con validaci\u00f3n b\u00e1sica, usado para validar datos de contacto.</p>"},{"location":"dsw/#urls_1","title":"Urls","text":"<pre><code>urlpatterns = [\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path('commissions/', CommissionsList.as_view(), name='commissions'),\n    path('faq/', FAQList.as_view(), name='faq'),\n]\n</code></pre>"},{"location":"dsw/#tests_1","title":"Tests","text":"<p>He a\u00f1adido unos test de comprobaci\u00f3n sencillos en esta app:</p> <ul> <li>test_get_about: Verifica que la vista de \"About\" responde con \u00e9xito (200 OK) y que el contenido incluye el t\u00edtulo esperado.</li> <li>test_get_commissions: Comprueba que la lista de comisiones se obtiene correctamente y que devuelve al menos un elemento.</li> <li>test_get_faq: Asegura que la lista de preguntas frecuentes (FAQ) se recupera correctamente y no est\u00e1 vac\u00eda.</li> <li>test_post_contact_success: Prueba que al enviar un mensaje de contacto v\u00e1lido, la API responde con \u00e9xito, guarda el mensaje en la base de datos y confirma el env\u00edo.</li> </ul> <pre><code>def test_post_contact_success(self):\n        url = reverse('contact')\n        data = {\n            'name': 'Sergio',\n            'email': 'matraca@example.com',\n            'message': 'Hola matraca, este es un mensaje de prueba.'\n        }\n        response = self.client.post(url, data)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data['message'], '\u00a1Se ha enviado el mensaje con \u00e9xito!')\n        self.assertTrue(Contact.objects.filter(email='matraca@example.com').exists())\n</code></pre> <ul> <li>test_post_contact_missing_fields: Verifica que si faltan datos obligatorios en el formulario de contacto, la API responde con un error 400 y muestra un mensaje de error.</li> </ul>"},{"location":"dsw/#aplicacion-product","title":"Aplicaci\u00f3n Product","text":""},{"location":"dsw/#modelo-category","title":"Modelo Category","text":"<p>Este modelo representa las categor\u00edas de productos en la tienda. Cada categor\u00eda tiene un nombre (<code>name</code>) y un <code>slug</code> \u00fanico que se utiliza para construir URLs amigables. Las categor\u00edas se ordenan alfab\u00e9ticamente por nombre para facilitar su visualizaci\u00f3n.</p> <ul> <li>Campos:<ul> <li><code>name</code>: Nombre descriptivo de la categor\u00eda.</li> <li><code>slug</code>: Identificador \u00fanico para URLs.</li> </ul> </li> <li>M\u00e9todos importantes:<ul> <li><code>get_absolute_url()</code>: Devuelve la URL relativa basada en el slug, facilitando la navegaci\u00f3n hacia la categor\u00eda.</li> </ul> </li> <li>Meta:<ul> <li>Ordena las categor\u00edas por nombre (<code>ordering = ('name',)</code>).</li> </ul> </li> </ul>"},{"location":"dsw/#modelo-product","title":"Modelo Product","text":"<p>Este modelo define los productos que se ofrecen en la tienda, cada uno vinculado a una categor\u00eda espec\u00edfica mediante una relaci\u00f3n de clave for\u00e1nea (<code>ForeignKey</code>). Incluye detalles b\u00e1sicos como nombre, descripci\u00f3n, precio y fechas de creaci\u00f3n. Tambi\u00e9n permite gestionar im\u00e1genes principales y miniaturas, generando autom\u00e1ticamente una miniatura si no existe para optimizar la carga.</p> <ul> <li>Campos principales:<ul> <li><code>category</code>: Categor\u00eda a la que pertenece el producto.</li> <li><code>name</code>: Nombre del producto.</li> <li><code>slug</code>: Identificador \u00fanico para URLs.</li> <li><code>description</code>: Descripci\u00f3n detallada (opcional).</li> <li><code>price</code>: Precio del producto con dos decimales.</li> <li><code>image</code>: Imagen principal del producto.</li> <li><code>thumbnail</code>: Imagen en miniatura, optimizada para cargas r\u00e1pidas.</li> <li><code>date_added</code>: Fecha en que se a\u00f1adi\u00f3 el producto.</li> <li><code>weight</code>: Peso base del producto en gramos (importante para env\u00edos y log\u00edstica).</li> </ul> </li> <li>M\u00e9todos relevantes:<ul> <li><code>get_absolute_url()</code>: Construye la URL del producto usando el slug de la categor\u00eda y del producto.</li> <li><code>get_image()</code>: Retorna la URL completa de la imagen principal.</li> <li><code>get_thumbnail()</code>: Retorna la URL de la miniatura, gener\u00e1ndola autom\u00e1ticamente si no existe.</li> <li><code>make_thumbnail(image, size)</code>: Crea una miniatura redimensionando y optimizando la imagen principal.</li> </ul> </li> <li>Meta:<ul> <li>Ordena los productos por fecha de adici\u00f3n, mostrando primero los m\u00e1s recientes (<code>ordering = ('-date_added',)</code>).</li> </ul> </li> </ul> <pre><code>class Product(models.Model):\n    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    slug = models.SlugField(unique=True)\n    description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n    image = models.ImageField(upload_to='uploads/', blank=True, null=True)\n    thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)\n    date_added = models.DateTimeField(auto_now_add=True)\n    weight = models.PositiveIntegerField(default=0, help_text=\"Peso base en gramos\")\n\n    class Meta:\n        ordering = ('-date_added',)\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return f'/{self.category.slug}/{self.slug}/'\n\n    def get_image(self):\n        if self.image:\n            return 'http://127.0.0.1:8000' + self.image.url\n        return ''\n\n    def get_thumbnail(self):\n        if self.thumbnail:\n            return 'http://127.0.0.1:8000' + self.thumbnail.url\n        else:\n            if self.image:\n                self.thumbnail = self.make_thumbnail(self.image)\n                self.save()\n                return 'http://127.0.0.1:8000' + self.thumbnail.url\n            else:\n                return ''\n\n    def make_thumbnail(self, image, size=(600, 400)):\n\n        img = Image.open(image)\n        img = img.convert('RGB')\n        img.thumbnail(size)\n\n        thumb_io = BytesIO()\n        img.save(thumb_io, 'JPEG', quality=85)\n\n        thumbnail = File(thumb_io, name= image.name)\n        return thumbnail\n</code></pre>"},{"location":"dsw/#modelo-productimage","title":"Modelo ProductImage","text":"<p>Este modelo permite a\u00f1adir m\u00faltiples im\u00e1genes adicionales para un producto, mejorando la presentaci\u00f3n visual en la tienda.</p> <ul> <li>Campos:<ul> <li><code>product</code>: Producto asociado (FK).</li> <li><code>image</code>: Imagen adicional.</li> <li><code>alt_text</code>: Texto alternativo para accesibilidad y SEO (opcional).</li> </ul> </li> </ul>"},{"location":"dsw/#modelo-productoption","title":"Modelo ProductOption","text":"<p>Define opciones o variantes de un producto que pueden afectar su precio y peso, como diferentes tama\u00f1os, colores o configuraciones personalizadas.</p> <ul> <li>Campos:<ul> <li><code>product</code>: Producto asociado (FK).</li> <li><code>name</code>: Nombre de la opci\u00f3n o variante.</li> <li><code>additional_price</code>: Precio adicional que suma esta opci\u00f3n al producto base.</li> <li><code>additional_weight</code>: Incremento o decremento de peso en gramos que a\u00f1ade esta opci\u00f3n.</li> </ul> </li> </ul> <p>Este conjunto de modelos est\u00e1 dise\u00f1ado para gestionar la tienda en l\u00ednea con productos categorizados, n\u00famero de im\u00e1genes flexible y variantes personalizables, proporcionando una base robusta para manejar cat\u00e1logo, presentaci\u00f3n y c\u00e1lculo de precios/pesos para env\u00edos. Adem\u00e1s, incluye funciones para optimizar la carga de im\u00e1genes con miniaturas generadas autom\u00e1ticamente.</p>"},{"location":"dsw/#vistas-del-modulo-de-productos","title":"Vistas del m\u00f3dulo de productos","text":""},{"location":"dsw/#latestproductslist-apiview","title":"<code>LatestProductsList</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Proporciona una lista completa de todos los productos disponibles en la tienda.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get</code>: Recupera todos los objetos <code>Product</code>, los serializa y devuelve los datos en formato JSON.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para mostrar todos los productos recientes o disponibles.</p> </li> </ul>"},{"location":"dsw/#productdetail-apiview","title":"<code>ProductDetail</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Muestra el detalle de un producto espec\u00edfico, identific\u00e1ndolo por el slug de la categor\u00eda y el slug del producto.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get_object(category_slug, product_slug)</code>: Busca el producto que corresponde a la categor\u00eda y slug indicados. Si no existe, lanza un error 404.</li> <li><code>get</code>: Usa <code>get_object</code> para obtener el producto y devuelve su informaci\u00f3n serializada.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para obtener la informaci\u00f3n completa de un producto en particular.</p> </li> </ul>"},{"location":"dsw/#categorydetail-apiview","title":"<code>CategoryDetail</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Proporciona la informaci\u00f3n detallada de una categor\u00eda identificada por su slug.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get_object(category_slug)</code>: Busca la categor\u00eda por slug o lanza error 404 si no existe.</li> <li><code>get</code>: Devuelve los datos serializados de la categor\u00eda encontrada.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para ver detalles de una categor\u00eda espec\u00edfica.</p> </li> </ul>"},{"location":"dsw/#search-funcion-con-decorador-api_viewpost","title":"<code>search</code> (Funci\u00f3n con decorador <code>@api_view(['POST'])</code>)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Permite buscar productos mediante una consulta de texto, que compara el t\u00e9rmino con los campos <code>name</code> y <code>description</code>.</p> </li> <li> <p>Par\u00e1metros:</p> <ul> <li>Recibe un JSON con el campo <code>query</code> que contiene la palabra o frase a buscar.</li> </ul> </li> <li>Funcionamiento:<ul> <li>Filtra los productos que contengan el texto buscado en su nombre o descripci\u00f3n (case-insensitive).</li> <li>Devuelve la lista de productos que coinciden, o una lista vac\u00eda si no hay t\u00e9rmino de b\u00fasqueda.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para implementar funcionalidades de b\u00fasqueda din\u00e1mica en la tienda.</p> </li> </ul> <pre><code>@api_view(['POST'])\ndef  search(request):\n    query = request.data.get('query', '')\n    if query:\n        products = Product.objects.filter(Q(name__icontains=query) | Q(description__icontains=query))\n        serializer = ProductSerializer(products, many=True)\n        return Response(serializer.data)\n    else:\n        return Response({'products': []})\n</code></pre>"},{"location":"dsw/#serializadores-del-modulo-de-productos","title":"Serializadores del m\u00f3dulo de productos","text":""},{"location":"dsw/#productimageserializer","title":"<code>ProductImageSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa las im\u00e1genes asociadas a un producto.</p> </li> <li> <p>Campos:</p> <ul> <li><code>image</code>: archivo de imagen.</li> <li><code>alt_text</code>: texto alternativo para accesibilidad.</li> <li><code>full_image_url</code>: URL completa absoluta generada din\u00e1micamente para acceder a la imagen.</li> </ul> </li> <li>M\u00e9todos especiales:<ul> <li><code>get_full_image_url</code>: Construye la URL completa de la imagen usando el contexto de la petici\u00f3n para devolver un enlace absoluto.</li> </ul> </li> </ul> <pre><code>class ProductImageSerializer(serializers.ModelSerializer):\n    full_image_url = serializers.SerializerMethodField()\n\n    class Meta:\n        model = ProductImage\n        fields = ['image', 'alt_text', 'full_image_url']\n\n    def get_full_image_url(self, obj):\n        request = self.context.get('request')\n        if request:\n            return request.build_absolute_uri(obj.image.url)\n        return obj.image.url\n</code></pre>"},{"location":"dsw/#productoptionserializer","title":"<code>ProductOptionSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa las opciones adicionales de un producto, como variantes con precio y peso extra.</p> </li> <li> <p>Campos:</p> <ul> <li><code>name</code>: nombre de la opci\u00f3n.</li> <li><code>additional_price</code>: incremento en el precio para esta opci\u00f3n.</li> <li><code>additional_weight</code>: incremento en el peso para esta opci\u00f3n.</li> </ul> </li> </ul>"},{"location":"dsw/#productserializer","title":"<code>ProductSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa un producto, incluyendo sus datos b\u00e1sicos, im\u00e1genes y opciones relacionadas.</p> </li> <li> <p>Campos:</p> <ul> <li><code>id</code>, <code>name</code>, <code>price</code>, <code>weight</code>: informaci\u00f3n b\u00e1sica del producto.</li> <li><code>get_absolute_url</code>: URL relativa al detalle del producto.</li> <li><code>description</code>: descripci\u00f3n del producto.</li> <li><code>get_image</code>, <code>get_thumbnail</code>: m\u00e9todos que devuelven las URLs de imagen principal y miniatura.</li> <li><code>images</code>: lista de im\u00e1genes adicionales, serializadas con <code>ProductImageSerializer</code>.</li> <li><code>options</code>: lista de opciones del producto, serializadas con <code>ProductOptionSerializer</code>.</li> </ul> </li> </ul>"},{"location":"dsw/#categoryserializer","title":"<code>CategorySerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa una categor\u00eda, incluyendo la lista de productos que pertenecen a ella.</p> </li> <li> <p>Campos:</p> <ul> <li><code>id</code>, <code>name</code>: datos b\u00e1sicos de la categor\u00eda.</li> <li><code>get_absolute_url</code>: URL relativa para acceder a la categor\u00eda.</li> <li><code>products</code>: lista de productos relacionados, serializados con <code>ProductSerializer</code>.</li> </ul> </li> </ul>"},{"location":"dsw/#urls-de-la-aplicacion-product","title":"URLs de la aplicaci\u00f3n Product","text":"<pre><code>from django.urls import path\nfrom product import views\n\nurlpatterns = [\n    path('latest-products/', views.LatestProductsList.as_view(), name='latest-products'),\n    path('products/search/', views.search, name='product-search'),\n    path('products/&lt;slug:category_slug&gt;/&lt;slug:product_slug&gt;/', views.ProductDetail.as_view(), name='product-detail'),\n    path('products/&lt;slug:category_slug&gt;/', views.CategoryDetail.as_view(), name='category-detail'),\n]\n</code></pre>"},{"location":"dsw/#tests_2","title":"Tests","text":"<p>Utilizo <code>APITestCase</code> de Django REST Framework para validar las principales funcionalidades de la API de productos, asegurando que las vistas respondan correctamente y que los datos devueltos sean los esperados.</p> <pre><code>from rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.urls import reverse\nfrom .models import Category, Product\n\nclass ProductAPITest(APITestCase):\n    def setUp(self):\n        # Crear una categor\u00eda y un producto para usar en los tests\n        self.category = Category.objects.create(name=\"Test Category\", slug=\"test-category\")\n        self.product = Product.objects.create(\n            category=self.category,\n            name=\"Test Product\",\n            slug=\"test-product\",\n            price=9.99,\n            weight=100\n        )\n</code></pre>"},{"location":"dsw/#test_latest_products_list","title":"test_latest_products_list","text":"<p>Este test verifica que la vista de productos m\u00e1s recientes (<code>latest-products</code>) responda con \u00e9xito (c\u00f3digo 200) y que el producto creado en <code>setUp</code> aparezca en la lista.</p> <pre><code>def test_latest_products_list(self):\n    url = reverse('latest-products')  \n    # Construcci\u00f3n din\u00e1mica de la URL usando el nombre de la ruta\n    response = self.client.get('/api/v1/latest-products/')  \n    # Se puede usar directamente la URL\n    self.assertEqual(response.status_code, status.HTTP_200_OK) \n     # Comprobamos respuesta exitosa\n    # Confirmamos que \"Test Product\" est\u00e9 en los datos recibidos\n    self.assertTrue(any(p['name'] == \"Test Product\" for p in response.data))\n</code></pre>"},{"location":"dsw/#test_product_detail","title":"test_product_detail","text":"<p>Comprueba que la vista de detalle de producto funcione correctamente, devolviendo el producto esperado cuando se consulta por categor\u00eda y slug.</p> <pre><code>def test_product_detail(self):\n    url = f'/api/v1/products/{self.category.slug}/{self.product.slug}/'\n    response = self.client.get(url)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['name'], \"Test Product\")  \n    # Validamos que el producto sea el correcto\n</code></pre>"},{"location":"dsw/#test_category_detail","title":"test_category_detail","text":"<p>Valida que la vista de detalle de categor\u00eda responde correctamente e incluye la lista de productos asociados.</p> <pre><code>def test_category_detail(self):\n    url = f'/api/v1/products/{self.category.slug}/'\n    response = self.client.get(url)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['name'], \"Test Category\")  \n    # Confirmamos la categor\u00eda\n    self.assertTrue('products' in response.data) \n     # Verificamos que se devuelvan los productos relacionados\n</code></pre>"},{"location":"dsw/#test_search_products","title":"test_search_products","text":"<p>Test para la funcionalidad de b\u00fasqueda. Env\u00eda una consulta y verifica que el producto que contiene el t\u00e9rmino se incluya en la respuesta.</p> <pre><code>def test_search_products(self):\n    url = '/api/v1/products/search/'\n    response = self.client.post(url, {'query': 'Test'}, format='json')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertTrue(any(p['name'] == \"Test Product\" for p in response.data))\n</code></pre>"},{"location":"dsw/#test_search_no_query","title":"test_search_no_query","text":"<p>Asegura que si no se env\u00eda ning\u00fan t\u00e9rmino de b\u00fasqueda, la respuesta sea exitosa y se retorne una lista vac\u00eda.</p> <pre><code>def test_search_no_query(self):\n    url = '/api/v1/products/search/'\n    response = self.client.post(url, {}, format='json')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['products'], [])\n</code></pre>"},{"location":"dsw/#aplicacion-order","title":"Aplicaci\u00f3n Order","text":""},{"location":"dsw/#modelo","title":"Modelo","text":"<p>Representa una orden de compra realizada por un usuario en la tienda. Contiene informaci\u00f3n del cliente, detalles del pago y estado del env\u00edo.</p>"},{"location":"dsw/#campos-principales","title":"Campos principales:","text":"<ul> <li><code>user</code>: Relaci\u00f3n con el modelo <code>User</code> de Django. Indica el cliente que realiz\u00f3 el pedido.</li> <li><code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>address</code>, <code>zipcode</code>, <code>place</code>, <code>phone</code>: Datos personales y de contacto del comprador para la entrega.</li> <li><code>created_at</code>: Fecha y hora en que se cre\u00f3 el pedido. Se asigna autom\u00e1ticamente.</li> <li><code>paid_amount</code>: Monto total pagado por el pedido. Puede estar vac\u00edo si el pago no se ha procesado a\u00fan.</li> <li><code>stripe_token</code>: Token asociado a Stripe para el pago, usado para validaci\u00f3n y seguimiento del pago.</li> <li><code>shipping_cost</code>: Costo del env\u00edo, que puede variar seg\u00fan el destino o m\u00e9todo.</li> <li><code>status</code>: Estado actual del pedido. Puede ser:<ul> <li><code>\"processing\"</code> (En proceso)</li> <li><code>\"shipped\"</code> (Enviado)</li> <li><code>\"delivered\"</code> (Entregado)</li> </ul> </li> <li><code>tracking_number</code>: N\u00famero de seguimiento para el env\u00edo, opcional y se asigna cuando est\u00e1 disponible.</li> </ul>"},{"location":"dsw/#comportamiento","title":"Comportamiento:","text":"<ul> <li>Los pedidos se ordenan por fecha de creaci\u00f3n, mostrando primero las m\u00e1s recientes (<code>ordering = ['-created_at']</code>).</li> <li>La representaci\u00f3n en texto (<code>__str__</code>) devuelve el nombre del comprador, para identificaci\u00f3n r\u00e1pida en el admin o logs.</li> </ul>"},{"location":"dsw/#modelo-orderitem","title":"Modelo <code>OrderItem</code>","text":"<p>Representa un \u00edtem individual dentro de un pedido, es decir, un producto comprado.</p>"},{"location":"dsw/#campos-principales_1","title":"Campos principales:","text":"<ul> <li><code>order</code>: Relaci\u00f3n con <code>Order</code>. Un \u00edtem pertenece a un pedido espec\u00edfico.</li> <li><code>product</code>: Relaci\u00f3n con <code>Product</code>. El producto que fue comprado.</li> <li><code>price</code>: Precio unitario del producto en el momento de la compra. Esto garantiza que cambios futuros en precios no afecten el hist\u00f3rico de \u00f3rdenes.</li> <li><code>quantity</code>: Cantidad comprada de ese producto.</li> <li><code>selected_option</code>: Opcional, describe alguna variante o opci\u00f3n elegida para el producto (por ejemplo, talla, color).</li> </ul>"},{"location":"dsw/#comportamiento_1","title":"Comportamiento:","text":"<ul> <li>La representaci\u00f3n en texto devuelve el <code>id</code> del \u00edtem, para referencias sencillas.</li> </ul> <p>Esta aplicaci\u00f3n permite gestionar pedidos complejos, donde cada orden puede contener m\u00faltiples productos con opciones espec\u00edficas. Se almacena informaci\u00f3n del cliente y del pago para facilitar la gesti\u00f3n y seguimiento, as\u00ed como el estado de env\u00edo.</p>"},{"location":"dsw/#vistas_1","title":"Vistas","text":""},{"location":"dsw/#checkout-funcion-vista","title":"<code>checkout</code> (Funci\u00f3n vista)","text":"<p>Descripci\u00f3n:</p> <p>Permite a un usuario autenticado realizar el pago y crear una nueva orden.</p> <p>M\u00e9todo:</p> <p><code>POST</code></p> <p>Autenticaci\u00f3n y permisos:</p> <ul> <li>Solo usuarios autenticados mediante token pueden acceder.</li> </ul> <p>Flujo principal:</p> <ol> <li>Recibe los datos de la orden desde el cliente.</li> <li>Valida los datos con <code>OrderSerializer</code>.</li> <li>Calcula el total a cobrar sumando el costo de los productos y el env\u00edo.</li> <li>Realiza el cobro mediante la API de Stripe usando el token recibido.</li> <li>Si el pago es exitoso, guarda la orden asoci\u00e1ndola al usuario autenticado.</li> <li>Devuelve la orden creada con estado HTTP 201.</li> </ol> <p>Errores:</p> <ul> <li>Si falla la validaci\u00f3n o el cobro con Stripe, devuelve error 400 con detalles.</li> </ul> <pre><code>@api_view(['POST'])\n@authentication_classes([authentication.TokenAuthentication])\n@permission_classes([permissions.IsAuthenticated])\ndef checkout(request):\n    serializer = OrderSerializer(data=request.data)\n\n    if serializer.is_valid():\n        stripe.api_key = settings.STRIPE_SECRET_KEY\n\n        items = serializer.validated_data['items']\n        shipping_cost = serializer.validated_data.get('shipping_cost', 0)\n\n        paid_amount = sum(item.get('quantity') * item.get('product').price for item in items)\n        total_to_charge = paid_amount + shipping_cost\n\n        try:\n            charge = stripe.Charge.create(\n                amount=int(total_to_charge * 100),\n                currency='EUR',\n                description='Charge from Charge from TangerineMessStore',\n                source=serializer.validated_data['stripe_token']\n            )\n\n            serializer.save(user=request.user, paid_amount=total_to_charge)\n\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        except Exception:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"dsw/#orderslist-clase-basada-en-vista-apiview","title":"<code>OrdersList</code> (Clase basada en vista - APIView)","text":"<p>Descripci\u00f3n:</p> <p>Lista todas las \u00f3rdenes realizadas por el usuario autenticado.</p> <p>M\u00e9todo:</p> <p><code>GET</code></p> <p>Autenticaci\u00f3n y permisos:</p> <ul> <li>Solo usuarios autenticados mediante token pueden acceder.</li> </ul> <p>Flujo principal:</p> <ol> <li>Filtra las \u00f3rdenes por el usuario autenticado.</li> <li>Serializa la lista con <code>MyOrderSerializer</code>.</li> <li>Devuelve la lista de \u00f3rdenes en formato JSON.</li> </ol> <pre><code>class OrdersList(APIView):\n    authentication_classes = [authentication.TokenAuthentication]\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get(self, request, format=None):\n        orders = Order.objects.filter(user=request.user)\n        serializer = MyOrderSerializer(orders, many=True)\n        return Response(serializer.data)\n</code></pre> <ul> <li>Se usa Stripe para procesar pagos, configurando la clave secreta desde la configuraci\u00f3n del proyecto.</li> <li>La l\u00f3gica de cobro es manejada dentro de la vista <code>checkout</code>, asegurando que solo se cree la orden tras confirmarse el pago.</li> <li>El uso de autenticaci\u00f3n por token garantiza seguridad y control de acceso a las \u00f3rdenes y pagos.</li> </ul> <p></p>"},{"location":"dsw/#tests_3","title":"Tests","text":"<p>Estos tests comprueban el correcto funcionamiento de los endpoints relacionados con la creaci\u00f3n de pedidos (checkout) y la consulta de pedidos existentes para un usuario autenticado.</p> <pre><code>from rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\nfrom rest_framework.authtoken.models import Token\nfrom django.urls import reverse\nfrom .models import Order, OrderItem\nfrom product.models import Product, Category\n</code></pre>"},{"location":"dsw/#setup-inicial","title":"Setup inicial","text":"<p>Se crea un usuario de prueba con token de autenticaci\u00f3n, as\u00ed como una categor\u00eda y producto para simular la compra.</p> <pre><code>def setUp(self):\n    self.user = User.objects.create_user(username='testuser', password='testpass')\n    self.token = Token.objects.create(user=self.user)\n    self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)\n\n    self.category = Category.objects.create(name=\"Test Category\", slug=\"test-category\")\n    self.product = Product.objects.create(\n        category=self.category,\n        name=\"Test Product\",\n        slug=\"test-product\",\n        price=10.00,\n        weight=100\n    )\n</code></pre>"},{"location":"dsw/#test-exito-en-checkout","title":"Test: \u00c9xito en checkout","text":"<p>Este test env\u00eda una solicitud POST v\u00e1lida a la ruta de checkout para crear un pedido. Se valida que:</p> <ul> <li>La respuesta sea HTTP 201 (creado).</li> <li>Se haya creado un pedido y un \u00edtem relacionado.</li> <li>El monto pagado sea el correcto (precio productos + env\u00edo).</li> </ul> <pre><code>def test_checkout_success(self):\n    url = reverse('checkout')\n    data = {\n        \"first_name\": \"Sergio\",\n        \"last_name\": \"Delgado\",\n        \"email\": \"matraca@example.com\",\n        \"address\": \"123 Matracazo\",\n        \"zipcode\": \"12345\",\n        \"place\": \"City\",\n        \"phone\": \"1234567890\",\n        \"stripe_token\": \"tok_visa\",\n        \"shipping_cost\": \"5.00\",\n        \"items\": [\n            {\n                \"product\": self.product.id,\n                \"quantity\": 2,\n                \"price\": \"10.00\"\n            }\n        ]\n    }\n    response = self.client.post(url, data, format='json')\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(Order.objects.count(), 1)\n    self.assertEqual(OrderItem.objects.count(), 1)\n    self.assertEqual(Order.objects.first().paid_amount, 25.00)  # (2*10) + 5 env\u00edo\n</code></pre>"},{"location":"dsw/#test-checkout-con-campos-faltantes","title":"Test: Checkout con campos faltantes","text":"<p>Verifica que la API rechace solicitudes incompletas o inv\u00e1lidas, devolviendo un error HTTP 400.</p> <pre><code>def test_checkout_missing_fields(self):\n    url = reverse('checkout')\n    data = {\n        \"first_name\": \"Sergio\",\n        \"stripe_token\": \"tok_visa\",\n        \"items\": []\n    }\n    response = self.client.post(url, data, format='json')\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"dsw/#test-listado-de-pedidos-del-usuario","title":"Test: Listado de pedidos del usuario","text":"<p>Simula la consulta GET para obtener los pedidos creados por el usuario autenticado. Verifica que la respuesta sea correcta y que se devuelva la cantidad adecuada de pedidos.</p> <pre><code>def test_orders_list(self):\n    order = Order.objects.create(\n        user=self.user,\n        first_name=\"Sergio\",\n        last_name=\"Doe\",\n        email=\"matraca@example.com\",\n        address=\"123 Matracazo\",\n        zipcode=\"12345\",\n        place=\"City\",\n        phone=\"1234567890\",\n        stripe_token=\"tok_visa\",\n        paid_amount=15.00\n    )\n    response = self.client.get(reverse('orders-list'))\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n</code></pre>"},{"location":"dsw/#urls_2","title":"Urls","text":"<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('checkout/', views.checkout, name='checkout'),\n    path('orders/', views.OrdersList.as_view(), name='orders-list'),\n]\n</code></pre>"},{"location":"eie/","title":"EIE","text":""},{"location":"eie/#plan-de-marketing","title":"PLAN DE MARKETING","text":""},{"location":"eie/#11-analisis-de-mercado","title":"1.1 An\u00e1lisis de mercado","text":"<p>El p\u00fablico objetivo comprende principalmente personas entre 15 y 40 a\u00f1os, apasionadas por el anime, los videojuegos, la m\u00fasica y las series. Son fans de artistas independientes que buscan productos originales y personalizados que reflejen sus intereses.</p> <p>El producto estrella de la artista \u2014ilustraciones convertidas en merchandising como llaveros, pines, peluches y pegatinas\u2014 conecta con ese perfil de consumidor que busca piezas \u00fanicas ausentes en el merchandising oficial, frecuentemente limitado o gen\u00e9rico.</p> <p>En cuanto a la competencia, numerosos artistas utilizan plataformas como Etsy, Ko-fi o redes sociales (Instagram, Twitter) para promocionarse. Sin embargo, pocos disponen de una web profesional que centralice su presencia: tienda, portfolio, contacto y eventos. Esta web personal marca la diferencia al ofrecer una experiencia de usuario m\u00e1s coherente, profesional y directa. Adem\u00e1s, reduce comisiones de terceros y permite adaptar el dise\u00f1o a la est\u00e9tica de la artista.</p> <p>En los \u00faltimos a\u00f1os ha crecido la visibilidad del Artist Alley en ferias de manga y c\u00f3mic por toda Espa\u00f1a, y el p\u00fablico valora cada vez m\u00e1s las obras \u00fanicas. El cliente ideal aprecia el contacto directo con la artista, por lo que la web incluye un formulario para pedidos personalizados y comisiones.</p>"},{"location":"eie/#12-propuesta-de-valor","title":"1.2 Propuesta de valor","text":"<p>La tienda ofrece productos ilustrados de forma original, creados por una artista independiente, con un estilo visual propio y una conexi\u00f3n emocional con personajes y universos que los fans adoran.</p> <p>Adem\u00e1s de productos artesanales \u00fanicos, la web funciona como escaparate del talento de la artista: incluye portfolio, blog, calendario de eventos, contacto directo y una tienda profesional.</p> <p>Todo est\u00e1 centralizado, accesible desde cualquier red social o tarjeta de visita en eventos. Esto brinda al p\u00fablico una experiencia m\u00e1s directa, personalizada y confiable, permitiendo a la artista construir una comunidad fiel.</p>"},{"location":"eie/#13-estrategias-de-promocion-y-publicidad","title":"1.3 Estrategias de promoci\u00f3n y publicidad","text":"<ul> <li>Redes sociales (Instagram, Tumblr, Twitter): Publicaciones peri\u00f3dicas mostrando nuevos productos, procesos creativos, contenido detr\u00e1s de c\u00e1maras (\"work in progress\") y participaci\u00f3n en eventos.</li> <li>Blog en la web: Art\u00edculos sobre la inspiraci\u00f3n de sus personajes, dise\u00f1o de productos y experiencias en ferias, fortaleciendo el v\u00ednculo con la comunidad.</li> <li>Colaboraciones con tiendas o artistas para ampliar alcance y diversificar el p\u00fablico.</li> <li>Promociones: Pegatinas de regalo en primeras compras online, descuentos por combo o durante eventos especiales.</li> <li>Difusi\u00f3n cruzada: Incluir la direcci\u00f3n web en tarjetas, flyers, packaging y redes para redirigir tr\u00e1fico a la tienda online desde mercadillos f\u00edsicos.</li> </ul>"},{"location":"eie/#14-estrategia-de-ventas-y-precios","title":"1.4 Estrategia de ventas y precios","text":"<ul> <li>Estructura de precios: Basada en tipo de producto, tama\u00f1o y materiales. Ej: pegatinas (1-2 \u20ac), llaveros (5-8 \u20ac), peluches (20-40 \u20ac), comisiones digitales por encargo (seg\u00fan detalle y tipo).</li> <li>Upselling: Incentivar la compra de productos de mayor valor, como packs o productos premium (ediciones especiales).</li> <li>Cross-selling: Combos de productos relacionados (ej: \"combo anime X\" con llavero, postal y pin).</li> <li>Stock B: Venta con descuento de productos con imperfecciones m\u00ednimas.</li> <li>Ediciones limitadas: Productos \u00fanicos o con tiradas cortas para crear exclusividad (\"solo 20 unidades disponibles\").</li> </ul>"},{"location":"eie/#15-medicion-y-kpis","title":"1.5 Medici\u00f3n y KPIs","text":"<p>Para evaluar el rendimiento del proyecto se emplear\u00e1n estos indicadores medibles:</p> <ul> <li>Conversiones: Relaci\u00f3n entre visitas, registros y ventas en la tienda.</li> <li>Engagement en redes sociales: N\u00famero de likes, comentarios, compartidos y mensajes directos.</li> <li>Crecimiento de comunidad: Seguidores en Instagram/X o visitas recurrentes.</li> <li>Clientes recurrentes: Usuarios que recompran en un periodo determinado e incremento de clientes en eventos f\u00edsicos gracias a la visibilidad web.</li> <li>ROI (Retorno de la inversi\u00f3n): Medici\u00f3n del rendimiento de acciones promocionales, como ofrecer productos extra en pedidos online o recompensar en eventos f\u00edsicos a compradores previos de la web. El ROI comparar\u00e1 el gasto en promociones con los beneficios obtenidos en ventas directas, fidelizaci\u00f3n y aumento del tr\u00e1fico web, evaluando el impacto positivo real y sostenible de estas estrategias.</li> </ul>"},{"location":"eie/#plan-de-sostenibilidad","title":"PLAN DE SOSTENIBILIDAD","text":""},{"location":"eie/#21-sostenibilidad-economica","title":"2.1 Sostenibilidad econ\u00f3mica","text":"<p>La web propia permite reducir costes de intermediarios (como Etsy, Ko-fi) y controlar directamente el canal de ventas, aumentando el margen de beneficio por producto.</p> <p>Centralizar la actividad reduce gastos en publicidad dispersa y herramientas externas. La gesti\u00f3n bajo demanda evita exceso de stock, y la estructura web est\u00e1 dise\u00f1ada para crecer en funcionalidad seg\u00fan el negocio evoluciona, sin grandes inversiones iniciales.</p> <p>La plataforma facilita la implementaci\u00f3n de estrategias de venta como packs, promociones y comisiones personalizadas.</p>"},{"location":"eie/#22-sostenibilidad-social","title":"2.2 Sostenibilidad social","text":"<p>El dise\u00f1o web incorpora navegaci\u00f3n accesible, textos inclusivos y lenguaje cercano, creando una experiencia positiva para p\u00fablicos diversos.</p> <p>La secci\u00f3n de blog y portfolio divulga contenidos que conectan con intereses culturales y educativos, promoviendo valores de creatividad, identidad personal y comunidad.</p> <p>La web potencia el trabajo de una creadora canaria, impulsando el talento local y facilitando conexiones con otros artistas y eventos, tanto en Canarias como en la pen\u00ednsula.</p> <p>La creaci\u00f3n de cuentas de usuario con beneficios exclusivos fomenta una comunidad cercana y duradera.</p>"},{"location":"eie/#23-sostenibilidad-ambiental","title":"2.3 Sostenibilidad ambiental","text":"<p>La web est\u00e1 optimizada para ser ligera y eficiente, con im\u00e1genes y recursos optimizados para reducir el consumo energ\u00e9tico. Se utilizar\u00e1 un proveedor de hosting verde o de bajas emisiones, alineado con buenas pr\u00e1cticas ecol\u00f3gicas.</p> <p>La disponibilidad digital del cat\u00e1logo, informaci\u00f3n de eventos y contacto reduce la necesidad de materiales impresos, minimizando residuos.</p> <p>En conjunto, la plataforma promueve un consumo m\u00e1s consciente, donde cada pedido es informado, meditado y gestionado con mejor trazabilidad que los canales masivos o impersonales.</p>"}]}