{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proyecto de Final de Ciclo","text":""},{"location":"#kai-rodriguez-garcia","title":"Kai Rodr\u00edguez Garc\u00eda","text":"<p>Mi proyecto consiste en el desarrollo de una plataforma web integral para una ilustradora profesional. La plataforma act\u00faa como un escaparate digital multifuncional que incluye: portfolio art\u00edstico, tienda online de productos, informaci\u00f3n sobre comisiones, blog personal, formulario de contacto, calendario de eventos y una secci\u00f3n informativa completa. Esta soluci\u00f3n personalizada responde directamente a las necesidades espec\u00edficas de la artista, centralizando todas sus actividades profesionales en un \u00fanico espacio digital accesible y f\u00e1cil de gestionar.</p>"},{"location":"dor/","title":"DOR","text":""},{"location":"dor/#adaptabilidad","title":"Adaptabilidad","text":"<p>Para este proyecto he elegido una paleta de colores basada en azules y naranjas, representativos de la artista a quien est\u00e1 dedicada la web. Estos colores est\u00e1n definidos como variables CSS en un archivo separado para facilitar su uso consistente en todo el proyecto y permitir un mantenimiento sencillo:</p> <pre><code>:root {\n    --color-light-orange: #ffe2bb;\n    --color-primary: #F59300;\n    --color-secondary: #FF9100;\n    --color-secondary-hover: #cc6300;\n    --color-bg: #377AB9;\n    --color-dark-blue: #0056b3;\n    --color-darker-blue: #034184;\n    --color-darkest-blue: #1d1d35;\n    --color-warm-cream: #fffbf8;\n    --color-warmer-cream:#fdfdeb;\n    --color-yellow: #fdeaa5;\n    --color-light-blue: #81aedb;\n    --color-lighter-blue: #cbe5ff;\n    --color-grey: #838897;\n    --color-light-grey: #b8bfd3;\n  }\n</code></pre> <p>El uso de colores con buen contraste garantiza que los elementos sean f\u00e1cilmente localizables y legibles, mejorando la experiencia visual y funcional del usuario. Se han seleccionado tonos que combinan bien para destacar botones, textos y otros componentes clave.</p> <p>En cuanto a la fuente, he utilizado principalmente dos familias, Degular, y ObviouslyNarrow. La primera para textos descriptivos, y la segunda para titulares, por su car\u00e1cter alargado. Ambas son letras redondeadas. Adem\u00e1s, modifico esta seg\u00fan ayude a la legibilidad, como por ejemplo, a\u00f1adiendo la propiedad de letter-spacing en n\u00fameros o men\u00fas de navegaci\u00f3n para hacer a todo el mundo entender bien lo que est\u00e1 leyendo. En general, uso tama\u00f1os de fuente grandes para permitir a los visitantes leer sin problema.</p> <pre><code>@font-face {\n    font-family: 'Degular';\n    src: url('../fonts/DegularDisplay-Regular.otf') format('opentype');\n    font-weight: normal;\n    font-style: normal;\n  }\n    @font-face {\n    font-family: 'ObviouslyNarrow';\n    src: url('../fonts/ObviouslyNarrow-Regular.otf') format('opentype');\n    font-weight: normal;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: 'ObviouslyNarrowBold';\n    src: url('../fonts/ObviouslyNarrow-Bold.otf') format('opentype');\n    font-weight: bold;\n    font-style: bold;\n  }\n</code></pre>"},{"location":"dor/#accesibilidad-y-usabilidad","title":"Accesibilidad y Usabilidad","text":"<p>Se ha prestado especial atenci\u00f3n a la accesibilidad para asegurar que la web sea usable para la mayor cantidad de personas posible:</p> <ul> <li>Se emplean etiquetas <code>&lt;label&gt;</code> correctamente asociadas con todos los campos de formulario, facilitando el uso con lectores de pantalla y mejorando la navegaci\u00f3n por teclado.</li> <li>Todas las im\u00e1genes cuentan con atributos <code>alt</code> descriptivos, incluyendo las im\u00e1genes de productos, para ofrecer contexto a usuarios con discapacidades visuales.</li> <li>Los indicadores visuales para la interacci\u00f3n, como cambios de cursor, efectos hover en enlaces y botones, o animaciones sutiles en tarjetas, ofrecen se\u00f1ales claras sobre la interactividad de los elementos.</li> <li>La navegaci\u00f3n es clara, con botones y enlaces intuitivos, con tooltips informativos en iconos y elementos que requieren explicaci\u00f3n adicional.</li> <li>Se han implementado elementos como contadores visibles en el carrito y botones de f\u00e1cil acceso para acciones comunes (volver arriba, navegaci\u00f3n atr\u00e1s), que mejoran la experiencia del usuario.</li> <li>La interfaz es simple y consistente, reduciendo la curva de aprendizaje y haciendo que la web sea accesible para usuarios con diferentes niveles de habilidad digital.</li> <li>Utilizo toast o mensajes de informaci\u00f3n al usuario tras haber realizado acciones como a\u00f1adir al carrito, registrarse o comprar.</li> </ul>"},{"location":"dor/#diseno-responsive","title":"Dise\u00f1o Responsive","text":"<p>El dise\u00f1o es completamente responsive, adapt\u00e1ndose fluidamente a distintos tama\u00f1os y dispositivos:</p> <ul> <li>Se utiliza una combinaci\u00f3n de grid flexible (<code>flexbox</code>, CSS grid) y el sistema de columnas de Bootstrap (<code>col-12</code>, <code>col-md-6</code>, etc.) para que los componentes y las tarjetas se reorganizen y escalen correctamente en m\u00f3viles, tablets y escritorios.</li> <li>Los men\u00fas de navegaci\u00f3n se transforman en men\u00fas desplegables o hamburguesa en dispositivos m\u00f3viles para optimizar el espacio y facilitar el acceso.</li> <li>Los tama\u00f1os de fuentes y botones escalan de forma proporcional seg\u00fan el dispositivo para mantener una legibilidad \u00f3ptima y facilitar la interacci\u00f3n t\u00e1ctil.</li> <li>Las im\u00e1genes y dem\u00e1s contenidos gr\u00e1ficos se ajustan para evitar desbordamientos o distorsiones, manteniendo la coherencia visual.</li> <li>Se han incorporado media queries para modificar estilos espec\u00edficos en funci\u00f3n del ancho de pantalla, logrando un comportamiento adaptado sin sacrificar la est\u00e9tica en dispositivos grandes.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"dor/#home","title":"Home","text":"<p>En este caso, tengo un texto que se desplaza a lo largo de la pantalla, y he agregado un evento para evitar que se sobreponga en pantallas m\u00e1s peque\u00f1as, editando su ancho.</p> <p></p> <p></p>"},{"location":"dor/#navbar","title":"Navbar","text":"<p>Este se convierte en men\u00fa hamburguesa en dispositivos peque\u00f1os.</p> <p></p>"},{"location":"dor/#galeria","title":"Galer\u00eda:","text":"<p>Tiene etiquetas para las categor\u00edas que filtran, y estos botones activos est\u00e1n en az\u00fal.</p> <p></p> <p>Pantalla peque\u00f1a</p> <p></p> <p></p> <p>Se puede navegar entre elementos por flechas, y cerrar al darle click a la x, o cualquier parte fuera de la imagen.</p> <p>Al hacer hover, se muestra el t\u00edtulo de la imagen.</p> <p></p> <p>INFO - Sobre m\u00ed</p> <p></p> <p></p> <p></p>"},{"location":"dor/#info-comisiones","title":"INFO - Comisiones","text":"<p>Se adapta a las pantallas.</p> <p></p> <p></p> <p></p> <p>Info - Eventos</p> <p></p> <p></p> <p>Info - Preguntas y Respuestas</p> <p>Las preguntas desplegadas cambian de color e icono.</p> <p></p> <p></p> <p>Contacto</p> <p></p> <p></p> <p></p> <p>Tiene tooltip para indicar el significado del icono.</p> <p>Blog</p> <p></p> <p></p> <p></p> <p></p> <p>Blog/post</p> <p></p> <p></p> <p>Login Modal</p> <p>F\u00e1cil de abrir y cerrar, opaca el fondo de la p\u00e1gina. Contiene texto en los inputs para especificar qu\u00e9 debe escribir el usuario.</p> <p></p> <p></p> <p>M\u00f3vil:</p> <p></p> <p></p> <p>Mi cuenta</p> <p></p> <p></p> <p>Carrito:</p> <p>Mensajes explican el estado del carrito si no hay a\u00f1adidos</p> <p></p> <p></p> <p></p>"},{"location":"dor/#caja-desglose-de-pedido","title":"Caja. Desglose de pedido","text":"<p>La tienda</p> <p></p> <p>Animaci\u00f3n en la que se amplia el tama\u00f1o de la tarjeta y animaci\u00f3n de l\u00ednea bajo el t\u00edtulo.</p> <p>Perm\u00edte hacer b\u00fasquedas claras.</p> <p></p> <p></p> <p></p> <p>Vista m\u00f3vil:</p> <p></p> <p></p>"},{"location":"dsw/","title":"DSW","text":""},{"location":"dsw/#introduccion","title":"Introducci\u00f3n:","text":"<p>El backend del proyecto est\u00e1 desarrollado con Django y se encarga de gestionar la l\u00f3gica de negocio y los datos esenciales de la aplicaci\u00f3n: productos, usuarios, pedidos, publicaciones de blog, eventos, im\u00e1genes y m\u00e1s. Mediante Django REST Framework, se crean las APIs que comunican esta informaci\u00f3n con el frontend. Django facilita el desarrollo gracias a sus herramientas integradas como el sistema de administraci\u00f3n, el manejo de usuarios y su conexi\u00f3n con bases de datos.</p>"},{"location":"dsw/#librerias-usadas-en-el-backend","title":"Librer\u00edas usadas en el backend","text":"<p>El proyecto he experimentado y explorado posibilidades, descubriendo librer\u00edas nuevas que me ayudaron a aumentar la rapidez para en la creaci\u00f3n de apis.</p> <ul> <li>Django y DRF forman la base del backend y la API REST.</li> <li>djoser y simplejwt facilitan la autenticaci\u00f3n de usuarios mediante tokens JWT.</li> <li>django-cors-headers permite la comunicaci\u00f3n con el frontend en Vue configurando el acceso entre or\u00edgenes distintos.</li> <li>pillow gestiona la carga y edici\u00f3n de im\u00e1genes.</li> <li>stripe permite integrar pagos seguros en la web.</li> <li>cryptography y defusedxml refuerzan la seguridad del proyecto, protegiendo datos sensibles y evitando vulnerabilidades XML.</li> <li>Kubi - personalizar el panel de administraci\u00f3n</li> <li>Tambi\u00e9n se incluyen bibliotecas como requests, oauthlib, o social-auth.</li> </ul>"},{"location":"dsw/#aplicaciones","title":"APLICACIONES","text":"<p>Este proyecto cuenta con varias aplicaciones. Main, Post, Event, order, personal, portfolio, product, order. A continuaci\u00f3n hablar\u00e9 resumidamente de cada una de ellas.</p> <p>Cuenta con la carpeta media, donde se guardan todas las im\u00e1genes subidas al proyecto.</p>"},{"location":"dsw/#main","title":"MAIN","text":"<p>La app <code>main</code> centraliza la configuraci\u00f3n general del proyecto, como rutas, bases de datos, correo y middlewares. Incluye la configuraci\u00f3n de env\u00edo de correos mediante Gmail para facilitar la comunicaci\u00f3n en el formulario de contacto, y define los endpoints principales bajo <code>/api/v1/</code>, lo que permite escalar futuras versiones (como <code>v2</code>). Tambi\u00e9n gestiona la carga de archivos multimedia y est\u00e1tica, y define las rutas que enlazan con otras apps como <code>post</code>, <code>product</code>, <code>order</code>, etc.</p> <pre><code>from django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/v1/', include('djoser.urls')),\n    path('api/v1/', include('djoser.urls.authtoken')),\n    path('api/v1/', include('post.urls')),\n    path('api/v1/', include('product.urls')),\n    path('api/v1/', include('order.urls')),\n    path('api/v1/', include('event.urls')),\n    path('api/v1/', include('portfolio.urls')),\n    path('api/v1/', include('personal.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>Les he escrito el prefijo v1 para que no haya conflicto en caso de una nueva actualizaci\u00f3n de la api, a la que llamar\u00eda v2, ets\u2026</p> <p>Djoser: path('api/v1/', include('djoser.urls')),</p> <p>Incluye las URLs est\u00e1ndar de Djoser para manejar autenticaci\u00f3n (registro, login, logout, cambio de contrase\u00f1a, etc).</p> <p>path('api/v1/', include('djoser.urls.authtoken')),</p> <p>Incluye rutas espec\u00edficas para el token de autenticaci\u00f3n cuando usas el sistema de tokens con Django REST Framework.</p>"},{"location":"dsw/#aplicacion-post","title":"Aplicaci\u00f3n Post","text":"<p>Esta aplicaci\u00f3n gestiona publicaciones o entradas de blog, permitiendo almacenar contenido textual junto con im\u00e1genes relacionadas, organizadas en categor\u00edas definidas.</p>"},{"location":"dsw/#modelo-post","title":"Modelo <code>Post</code>","text":"<p>Representa una entrada o publicaci\u00f3n en el blog. Incluye los siguientes campos:</p> <ul> <li><code>title</code>: T\u00edtulo del post, m\u00e1ximo 256 caracteres.</li> <li><code>slug</code>: Cadena \u00fanica generada autom\u00e1ticamente a partir del t\u00edtulo para URLs amigables.</li> <li><code>content</code>: Contenido principal del post (texto libre).</li> <li><code>created_at</code>: Fecha y hora de creaci\u00f3n, asignada autom\u00e1ticamente.</li> <li><code>category</code>: Categor\u00eda del post, con opciones predefinidas (<code>Artist Alley</code>, <code>Daily Life</code>, <code>Announcement</code>, etc.).</li> </ul> <p>El m\u00e9todo <code>save()</code> sobreescrito asegura que el campo <code>slug</code> se actualice autom\u00e1ticamente usando la funci\u00f3n <code>slugify</code> con base en el t\u00edtulo, facilitando la generaci\u00f3n de URLs limpias.</p> <p>La clase <code>Meta</code> ordena los posts por fecha de creaci\u00f3n descendente para mostrar primero los m\u00e1s recientes.</p> <pre><code>class Post(models.Model):\n    class Category(models.TextChoices):\n        ARTIST_ALLEY = 'AL', 'Artist Alley'\n        DAILY_LIFE = 'DL', 'Daily Life'\n        OTHER = 'OT', 'Other'\n        ANNOUNCEMENT = 'AN', 'Announcement'\n\n    title = models.CharField(max_length=256)\n    slug = models.SlugField(unique=True)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    category = models.CharField(max_length=2, choices=Category.choices, default=Category.OTHER)\n\n    def save(self, *args, **kwargs):\n        self.slug = slugify(self.title)\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return f'/{self.slug}/'\n\n    class Meta:\n        ordering = ['-created_at']\n</code></pre>"},{"location":"dsw/#modelo-postimage","title":"Modelo <code>PostImage</code>","text":"<p>Permite asociar m\u00faltiples im\u00e1genes a un post, con los siguientes campos:</p> <ul> <li><code>post</code>: Relaci\u00f3n Many-to-One con el modelo <code>Post</code>.</li> <li><code>image</code>: Archivo de imagen que se guarda en la carpeta <code>uploads/blog_posts/</code>.</li> <li><code>caption</code>: Texto descriptivo o pie de foto, opcional.</li> </ul> <pre><code>class PostImage(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='images')\n    image = models.ImageField(upload_to='uploads/blog_posts/')\n    caption = models.CharField(max_length=256, blank=True)\n\n    def __str__(self):\n        return f\"Image for: {self.post.title}\"\n</code></pre>"},{"location":"dsw/#vistas","title":"Vistas","text":"<p>Se utilizan vistas basadas en clases (APIView) para ofrecer acceso a las publicaciones a trav\u00e9s de una API RESTful.</p> <ul> <li><code>PostList</code>: Devuelve una lista de posts, con opci\u00f3n a filtrar por categor\u00eda a trav\u00e9s de un par\u00e1metro GET <code>category</code>.</li> <li><code>PostDetail</code>: Devuelve los detalles completos de un post identificado por su <code>slug</code>.</li> </ul> <p>Ambas usan serializers para estructurar la respuesta JSON.</p> <pre><code>class PostList(APIView):\n    def get(self, request, format=None):\n        category = request.GET.get('category', None)\n        posts = Post.objects.all()\n        if category:\n            posts = posts.filter(category=category)\n        serializer = PostListSerializer(posts, many=True)\n        return Response(serializer.data)\n\nclass PostDetail(APIView):\n    def get_object(self, slug):\n        try:\n            return Post.objects.get(slug=slug)\n        except Post.DoesNotExist:\n            raise Http404\n\n    def get(self, request, slug, format=None):\n        post = self.get_object(slug)\n        serializer = PostDetailSerializer(post)\n        return Response(serializer.data)\n</code></pre>"},{"location":"dsw/#serializadores","title":"Serializadores","text":"<p>Transforman los modelos en datos JSON para la API.</p> <ul> <li><code>PostImageSerializer</code>: Serializa im\u00e1genes con su ruta y caption.</li> <li><code>PostListSerializer</code>: Resume los posts con t\u00edtulo, slug, fecha, categor\u00eda legible, resumen del contenido y lista de im\u00e1genes.</li> <li><code>PostDetailSerializer</code>: Muestra todos los detalles del post, incluyendo contenido completo e im\u00e1genes.</li> </ul> <pre><code>class PostImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PostImage\n        fields = ['image', 'caption']\n\nclass PostListSerializer(serializers.ModelSerializer):\n    summary = serializers.SerializerMethodField()\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n    images = PostImageSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'created_at', 'category', 'category_display', 'summary', 'images']\n\n    def get_summary(self, obj):\n        return ' '.join(obj.content.split()[:25]) + '...'\n\nclass PostDetailSerializer(serializers.ModelSerializer):\n    images = PostImageSerializer(many=True, read_only=True)\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n\n    class Meta:\n        model = Post\n        fields = ['title', 'slug', 'content', 'created_at', 'category', 'category_display', 'images']\n</code></pre>"},{"location":"dsw/#tests","title":"Tests","text":"<p>Se valida el comportamiento de la API para obtener la lista de posts y el detalle de un post espec\u00edfico, incluyendo la gesti\u00f3n de errores para slugs no existentes.</p> <ul> <li>Se crea un post de prueba en <code>setUp</code>.</li> <li>Se verifica que la lista de posts incluya dicho post.</li> <li>Se consulta el detalle por slug y se confirma la respuesta.</li> <li>Se prueba que un slug inexistente devuelve un error 404.</li> </ul> <pre><code>class PostAPITest(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.post = Post.objects.create(\n            title=\"Test Post\",\n            content=\"Contenido de prueba para el post.\",\n            category=Post.Category.ANNOUNCEMENT\n        )\n\n    def test_post_list(self):\n        response = self.client.get('/api/v1/posts/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertTrue(any(p['title'] == \"Test Post\" for p in response.data))\n\n    def test_post_detail(self):\n        response = self.client.get(f'/api/v1/posts/{self.post.slug}/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data['title'], \"Test Post\")\n\n    def test_post_not_found(self):\n        response = self.client.get('/api/v1/posts/slug-inexistente/')\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n</code></pre>"},{"location":"dsw/#urls","title":"URLs","text":"<p>Se definen rutas RESTful para la API de posts:</p> <pre><code>urlpatterns = [\n    path('posts/', PostList.as_view(), name='post-list'),\n    path('posts/&lt;slug:slug&gt;/', PostDetail.as_view(), name='post-detail'),\n]\n</code></pre>"},{"location":"dsw/#aplicacion-event","title":"Aplicaci\u00f3n Event","text":"<p>Esta aplicaci\u00f3n contiene el modelo UpcomingEvent representa eventos pr\u00f3ximos con detalles b\u00e1sicos para su presentaci\u00f3n.</p> <ul> <li>Campos principales:<ul> <li><code>title</code> (CharField): T\u00edtulo del evento.</li> <li><code>image</code> (ImageField): Imagen asociada al evento, guardada en la carpeta <code>uploads/events/</code>.</li> <li><code>start_date</code> (DateField): Fecha de inicio del evento.</li> <li><code>end_date</code> (DateField, opcional): Fecha de finalizaci\u00f3n, permite eventos de varios d\u00edas.</li> <li><code>location</code> (CharField): Lugar donde se realizar\u00e1 el evento.</li> <li><code>link</code> (URLField, opcional): Enlace externo relacionado con el evento (por ejemplo, p\u00e1gina oficial).</li> <li><code>location_link</code> (URLField, opcional): Enlace para la ubicaci\u00f3n (como un mapa o direcci\u00f3n web).</li> </ul> </li> <li>Comportamiento:<ul> <li>Ordena los eventos autom\u00e1ticamente por fecha de inicio (<code>start_date</code>).</li> <li>M\u00e9todo <code>is_multi_day()</code> que devuelve <code>True</code> si el evento dura m\u00e1s de un d\u00eda.</li> </ul> </li> <li>Representaci\u00f3n:<ul> <li>El m\u00e9todo <code>__str__</code> retorna el t\u00edtulo para facilitar su identificaci\u00f3n en interfaces administrativas.</li> </ul> </li> </ul> <p>Tiene una vista basada en APIView que crea un endpoint para obtener la lista completa de eventos pr\u00f3ximos. Al recibir una petici\u00f3n GET, consulta todos los registros del modelo <code>UpcomingEvent</code>, los serializa con <code>UpcomingEventSerializer</code> y devuelve los datos en formato JSON.</p> <p>La url para esta es: </p> <pre><code>path('events/', UpcomingEventList.as_view(), name='upcoming-events'),\n</code></pre> <p>Tambi\u00e9n tiene un test que crea un evento de prueba, hace una petici\u00f3n GET al endpoint <code>/events/, v</code>erifica que la respuesta es 200 OK y comprueba que el evento creado aparece en la respuesta.</p>"},{"location":"dsw/#aplicacion-portfolio","title":"Aplicaci\u00f3n Portfolio","text":"<p>Representa una entrada del portafolio.</p> <p>Modelo </p> <ul> <li><code>title</code> (CharField): T\u00edtulo de la entrada del portafolio, con un m\u00e1ximo de 255 caracteres.</li> <li><code>image</code> (ImageField): Imagen asociada a la entrada, almacenada en la carpeta <code>uploads/portfolio/</code>.</li> <li><code>category</code> (CharField): Categor\u00eda de la entrada, con opciones predefinidas: Concept Art, Animaci\u00f3n, Ilustraci\u00f3n, y Otros (por defecto).</li> <li><code>created_at</code> (DateTimeField): Fecha y hora en que se cre\u00f3 la entrada, se asigna autom\u00e1ticamente al crear el registro.</li> </ul> <p>Las entradas se ordenan por fecha de creaci\u00f3n descendente (<code>ordering = ['-created_at']</code>), mostrando primero las m\u00e1s recientes.</p> <p>Como en el caso anterior, es una aplicaci\u00f3n simple con una vista basada en APIView que obtiene una lista de registros que son serializados. Y una URL para acceder a los datos.</p> <pre><code>urlpatterns = [\n    path('portfolio/', PortfolioEntryList.as_view(), name='portfolio-list'),\n]\n</code></pre>"},{"location":"dsw/#aplicacion-personal","title":"Aplicaci\u00f3n Personal","text":"<p>Contiene modelos que gestionan la informaci\u00f3n personal, comisiones, preguntas frecuentes y contactos de la web.</p>"},{"location":"dsw/#modelo-about","title":"Modelo About","text":"<ul> <li><code>title</code> (CharField, opcional): T\u00edtulo descriptivo, puede quedar vac\u00edo.</li> <li><code>content</code> (TextField): Texto con informaci\u00f3n sobre la persona o proyecto.</li> <li><code>image</code> (ImageField, opcional): Imagen relacionada, almacenada en <code>media/about/</code>.</li> </ul> <p>Representa la secci\u00f3n \u201cAcerca de m\u00ed\u201d o informaci\u00f3n general.</p>"},{"location":"dsw/#modelo-commissions","title":"Modelo Commissions","text":"<ul> <li><code>title</code> (CharField, opcional): T\u00edtulo del servicio o comisi\u00f3n ofrecida.</li> <li><code>description</code> (TextField): Descripci\u00f3n detallada de la comisi\u00f3n.</li> <li><code>price</code> (DecimalField): Precio de la comisi\u00f3n, con hasta 10 d\u00edgitos y 2 decimales.</li> <li><code>slots_left</code> (PositiveIntegerField): N\u00famero de plazas disponibles para la comisi\u00f3n.</li> <li><code>image</code> (ImageField, opcional): Imagen ilustrativa guardada en <code>media/comissions/</code>.</li> </ul> <p>Gestiona las ofertas y disponibilidad de comisiones personalizadas.</p>"},{"location":"dsw/#modelo-faq","title":"Modelo FAQ","text":"<ul> <li><code>question</code> (CharField): Pregunta frecuente.</li> <li><code>answer</code> (TextField): Respuesta correspondiente a la pregunta.</li> </ul> <p>Modelo para mostrar las preguntas frecuentes y sus respuestas.</p>"},{"location":"dsw/#modelo-contact","title":"Modelo Contact","text":"<ul> <li><code>name</code> (CharField): Nombre del usuario que contacta.</li> <li><code>email</code> (EmailField): Correo electr\u00f3nico del usuario.</li> <li><code>message</code> (TextField): Mensaje enviado por el usuario.</li> <li><code>created_at</code> (DateTimeField): Fecha y hora en que se cre\u00f3 el contacto (registro autom\u00e1tico).</li> </ul> <p>Permite registrar los mensajes y consultas recibidas desde la secci\u00f3n de contacto.</p>"},{"location":"dsw/#vistas-apiview","title":"Vistas (APIView)","text":"<ul> <li> <p>ContactView (POST)</p> <p>Recibe nombre, email y mensaje, valida campos, guarda contacto y env\u00eda email notificando el mensaje.</p> </li> <li> <p>AboutView (GET)</p> <p>Devuelve la primera instancia de About serializada.</p> </li> <li> <p>CommissionsList (GET)</p> <p>Devuelve la lista completa de comisiones serializadas.</p> </li> <li> <p>FAQList (GET)</p> <p>Devuelve todas las preguntas frecuentes serializadas.</p> </li> </ul>"},{"location":"dsw/#serializadores_1","title":"Serializadores","text":"<p>Se basan en <code>ModelSerializer</code> y exponen todos los campos de sus modelos:</p> <p><code>AboutSerializer, CommissionsSerializer, FAQSerializer</code></p>"},{"location":"dsw/#formulario","title":"Formulario","text":"<p>ContactForm, un sencillo formulario para recibir mensajes desde el front.</p> <p>Campos: <code>name</code>, <code>email</code>, <code>message</code> con validaci\u00f3n b\u00e1sica, usado para validar datos de contacto.</p>"},{"location":"dsw/#urls_1","title":"Urls","text":"<pre><code>urlpatterns = [\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path('commissions/', CommissionsList.as_view(), name='commissions'),\n    path('faq/', FAQList.as_view(), name='faq'),\n]\n</code></pre>"},{"location":"dsw/#tests_1","title":"Tests","text":"<p>He a\u00f1adido unos test de comprobaci\u00f3n sencillos en esta app:</p> <ul> <li>test_get_about: Verifica que la vista de \"About\" responde con \u00e9xito (200 OK) y que el contenido incluye el t\u00edtulo esperado.</li> <li>test_get_commissions: Comprueba que la lista de comisiones se obtiene correctamente y que devuelve al menos un elemento.</li> <li>test_get_faq: Asegura que la lista de preguntas frecuentes (FAQ) se recupera correctamente y no est\u00e1 vac\u00eda.</li> <li>test_post_contact_success: Prueba que al enviar un mensaje de contacto v\u00e1lido, la API responde con \u00e9xito, guarda el mensaje en la base de datos y confirma el env\u00edo.</li> </ul> <pre><code>def test_post_contact_success(self):\n        url = reverse('contact')\n        data = {\n            'name': 'Sergio',\n            'email': 'matraca@example.com',\n            'message': 'Hola matraca, este es un mensaje de prueba.'\n        }\n        response = self.client.post(url, data)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data['message'], '\u00a1Se ha enviado el mensaje con \u00e9xito!')\n        self.assertTrue(Contact.objects.filter(email='matraca@example.com').exists())\n</code></pre> <ul> <li>test_post_contact_missing_fields: Verifica que si faltan datos obligatorios en el formulario de contacto, la API responde con un error 400 y muestra un mensaje de error.</li> </ul>"},{"location":"dsw/#aplicacion-product","title":"Aplicaci\u00f3n Product","text":""},{"location":"dsw/#modelo-category","title":"Modelo Category","text":"<p>Este modelo representa las categor\u00edas de productos en la tienda. Cada categor\u00eda tiene un nombre (<code>name</code>) y un <code>slug</code> \u00fanico que se utiliza para construir URLs amigables. Las categor\u00edas se ordenan alfab\u00e9ticamente por nombre para facilitar su visualizaci\u00f3n.</p> <ul> <li>Campos:<ul> <li><code>name</code>: Nombre descriptivo de la categor\u00eda.</li> <li><code>slug</code>: Identificador \u00fanico para URLs.</li> </ul> </li> <li>M\u00e9todos importantes:<ul> <li><code>get_absolute_url()</code>: Devuelve la URL relativa basada en el slug, facilitando la navegaci\u00f3n hacia la categor\u00eda.</li> </ul> </li> <li>Meta:<ul> <li>Ordena las categor\u00edas por nombre (<code>ordering = ('name',)</code>).</li> </ul> </li> </ul>"},{"location":"dsw/#modelo-product","title":"Modelo Product","text":"<p>Este modelo define los productos que se ofrecen en la tienda, cada uno vinculado a una categor\u00eda espec\u00edfica mediante una relaci\u00f3n de clave for\u00e1nea (<code>ForeignKey</code>). Incluye detalles b\u00e1sicos como nombre, descripci\u00f3n, precio y fechas de creaci\u00f3n. Tambi\u00e9n permite gestionar im\u00e1genes principales y miniaturas, generando autom\u00e1ticamente una miniatura si no existe para optimizar la carga.</p> <ul> <li>Campos principales:<ul> <li><code>category</code>: Categor\u00eda a la que pertenece el producto.</li> <li><code>name</code>: Nombre del producto.</li> <li><code>slug</code>: Identificador \u00fanico para URLs.</li> <li><code>description</code>: Descripci\u00f3n detallada (opcional).</li> <li><code>price</code>: Precio del producto con dos decimales.</li> <li><code>image</code>: Imagen principal del producto.</li> <li><code>thumbnail</code>: Imagen en miniatura, optimizada para cargas r\u00e1pidas.</li> <li><code>date_added</code>: Fecha en que se a\u00f1adi\u00f3 el producto.</li> <li><code>weight</code>: Peso base del producto en gramos (importante para env\u00edos y log\u00edstica).</li> </ul> </li> <li>M\u00e9todos relevantes:<ul> <li><code>get_absolute_url()</code>: Construye la URL del producto usando el slug de la categor\u00eda y del producto.</li> <li><code>get_image()</code>: Retorna la URL completa de la imagen principal.</li> <li><code>get_thumbnail()</code>: Retorna la URL de la miniatura, gener\u00e1ndola autom\u00e1ticamente si no existe.</li> <li><code>make_thumbnail(image, size)</code>: Crea una miniatura redimensionando y optimizando la imagen principal.</li> </ul> </li> <li>Meta:<ul> <li>Ordena los productos por fecha de adici\u00f3n, mostrando primero los m\u00e1s recientes (<code>ordering = ('-date_added',)</code>).</li> </ul> </li> </ul> <pre><code>class Product(models.Model):\n    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    slug = models.SlugField(unique=True)\n    description = models.TextField(blank=True, null=True)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n    image = models.ImageField(upload_to='uploads/', blank=True, null=True)\n    thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)\n    date_added = models.DateTimeField(auto_now_add=True)\n    weight = models.PositiveIntegerField(default=0, help_text=\"Peso base en gramos\")\n\n    class Meta:\n        ordering = ('-date_added',)\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return f'/{self.category.slug}/{self.slug}/'\n\n    def get_image(self):\n        if self.image:\n            return 'http://127.0.0.1:8000' + self.image.url\n        return ''\n\n    def get_thumbnail(self):\n        if self.thumbnail:\n            return 'http://127.0.0.1:8000' + self.thumbnail.url\n        else:\n            if self.image:\n                self.thumbnail = self.make_thumbnail(self.image)\n                self.save()\n                return 'http://127.0.0.1:8000' + self.thumbnail.url\n            else:\n                return ''\n\n    def make_thumbnail(self, image, size=(600, 400)):\n\n        img = Image.open(image)\n        img = img.convert('RGB')\n        img.thumbnail(size)\n\n        thumb_io = BytesIO()\n        img.save(thumb_io, 'JPEG', quality=85)\n\n        thumbnail = File(thumb_io, name= image.name)\n        return thumbnail\n</code></pre>"},{"location":"dsw/#modelo-productimage","title":"Modelo ProductImage","text":"<p>Este modelo permite a\u00f1adir m\u00faltiples im\u00e1genes adicionales para un producto, mejorando la presentaci\u00f3n visual en la tienda.</p> <ul> <li>Campos:<ul> <li><code>product</code>: Producto asociado (FK).</li> <li><code>image</code>: Imagen adicional.</li> <li><code>alt_text</code>: Texto alternativo para accesibilidad y SEO (opcional).</li> </ul> </li> </ul>"},{"location":"dsw/#modelo-productoption","title":"Modelo ProductOption","text":"<p>Define opciones o variantes de un producto que pueden afectar su precio y peso, como diferentes tama\u00f1os, colores o configuraciones personalizadas.</p> <ul> <li>Campos:<ul> <li><code>product</code>: Producto asociado (FK).</li> <li><code>name</code>: Nombre de la opci\u00f3n o variante.</li> <li><code>additional_price</code>: Precio adicional que suma esta opci\u00f3n al producto base.</li> <li><code>additional_weight</code>: Incremento o decremento de peso en gramos que a\u00f1ade esta opci\u00f3n.</li> </ul> </li> </ul> <p>Este conjunto de modelos est\u00e1 dise\u00f1ado para gestionar la tienda en l\u00ednea con productos categorizados, n\u00famero de im\u00e1genes flexible y variantes personalizables, proporcionando una base robusta para manejar cat\u00e1logo, presentaci\u00f3n y c\u00e1lculo de precios/pesos para env\u00edos. Adem\u00e1s, incluye funciones para optimizar la carga de im\u00e1genes con miniaturas generadas autom\u00e1ticamente.</p>"},{"location":"dsw/#vistas-del-modulo-de-productos","title":"Vistas del m\u00f3dulo de productos","text":""},{"location":"dsw/#latestproductslist-apiview","title":"<code>LatestProductsList</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Proporciona una lista completa de todos los productos disponibles en la tienda.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get</code>: Recupera todos los objetos <code>Product</code>, los serializa y devuelve los datos en formato JSON.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para mostrar todos los productos recientes o disponibles.</p> </li> </ul>"},{"location":"dsw/#productdetail-apiview","title":"<code>ProductDetail</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Muestra el detalle de un producto espec\u00edfico, identific\u00e1ndolo por el slug de la categor\u00eda y el slug del producto.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get_object(category_slug, product_slug)</code>: Busca el producto que corresponde a la categor\u00eda y slug indicados. Si no existe, lanza un error 404.</li> <li><code>get</code>: Usa <code>get_object</code> para obtener el producto y devuelve su informaci\u00f3n serializada.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para obtener la informaci\u00f3n completa de un producto en particular.</p> </li> </ul>"},{"location":"dsw/#categorydetail-apiview","title":"<code>CategoryDetail</code> (APIView)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Proporciona la informaci\u00f3n detallada de una categor\u00eda identificada por su slug.</p> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>get_object(category_slug)</code>: Busca la categor\u00eda por slug o lanza error 404 si no existe.</li> <li><code>get</code>: Devuelve los datos serializados de la categor\u00eda encontrada.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para ver detalles de una categor\u00eda espec\u00edfica.</p> </li> </ul>"},{"location":"dsw/#search-funcion-con-decorador-api_viewpost","title":"<code>search</code> (Funci\u00f3n con decorador <code>@api_view(['POST'])</code>)","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Permite buscar productos mediante una consulta de texto, que compara el t\u00e9rmino con los campos <code>name</code> y <code>description</code>.</p> </li> <li> <p>Par\u00e1metros:</p> <ul> <li>Recibe un JSON con el campo <code>query</code> que contiene la palabra o frase a buscar.</li> </ul> </li> <li>Funcionamiento:<ul> <li>Filtra los productos que contengan el texto buscado en su nombre o descripci\u00f3n (case-insensitive).</li> <li>Devuelve la lista de productos que coinciden, o una lista vac\u00eda si no hay t\u00e9rmino de b\u00fasqueda.</li> </ul> </li> <li> <p>Uso:</p> <p>Endpoint para implementar funcionalidades de b\u00fasqueda din\u00e1mica en la tienda.</p> </li> </ul> <pre><code>@api_view(['POST'])\ndef  search(request):\n    query = request.data.get('query', '')\n    if query:\n        products = Product.objects.filter(Q(name__icontains=query) | Q(description__icontains=query))\n        serializer = ProductSerializer(products, many=True)\n        return Response(serializer.data)\n    else:\n        return Response({'products': []})\n</code></pre>"},{"location":"dsw/#serializadores-del-modulo-de-productos","title":"Serializadores del m\u00f3dulo de productos","text":""},{"location":"dsw/#productimageserializer","title":"<code>ProductImageSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa las im\u00e1genes asociadas a un producto.</p> </li> <li> <p>Campos:</p> <ul> <li><code>image</code>: archivo de imagen.</li> <li><code>alt_text</code>: texto alternativo para accesibilidad.</li> <li><code>full_image_url</code>: URL completa absoluta generada din\u00e1micamente para acceder a la imagen.</li> </ul> </li> <li>M\u00e9todos especiales:<ul> <li><code>get_full_image_url</code>: Construye la URL completa de la imagen usando el contexto de la petici\u00f3n para devolver un enlace absoluto.</li> </ul> </li> </ul> <pre><code>class ProductImageSerializer(serializers.ModelSerializer):\n    full_image_url = serializers.SerializerMethodField()\n\n    class Meta:\n        model = ProductImage\n        fields = ['image', 'alt_text', 'full_image_url']\n\n    def get_full_image_url(self, obj):\n        request = self.context.get('request')\n        if request:\n            return request.build_absolute_uri(obj.image.url)\n        return obj.image.url\n</code></pre>"},{"location":"dsw/#productoptionserializer","title":"<code>ProductOptionSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa las opciones adicionales de un producto, como variantes con precio y peso extra.</p> </li> <li> <p>Campos:</p> <ul> <li><code>name</code>: nombre de la opci\u00f3n.</li> <li><code>additional_price</code>: incremento en el precio para esta opci\u00f3n.</li> <li><code>additional_weight</code>: incremento en el peso para esta opci\u00f3n.</li> </ul> </li> </ul>"},{"location":"dsw/#productserializer","title":"<code>ProductSerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa un producto, incluyendo sus datos b\u00e1sicos, im\u00e1genes y opciones relacionadas.</p> </li> <li> <p>Campos:</p> <ul> <li><code>id</code>, <code>name</code>, <code>price</code>, <code>weight</code>: informaci\u00f3n b\u00e1sica del producto.</li> <li><code>get_absolute_url</code>: URL relativa al detalle del producto.</li> <li><code>description</code>: descripci\u00f3n del producto.</li> <li><code>get_image</code>, <code>get_thumbnail</code>: m\u00e9todos que devuelven las URLs de imagen principal y miniatura.</li> <li><code>images</code>: lista de im\u00e1genes adicionales, serializadas con <code>ProductImageSerializer</code>.</li> <li><code>options</code>: lista de opciones del producto, serializadas con <code>ProductOptionSerializer</code>.</li> </ul> </li> </ul>"},{"location":"dsw/#categoryserializer","title":"<code>CategorySerializer</code>","text":"<ul> <li> <p>Descripci\u00f3n:</p> <p>Serializa una categor\u00eda, incluyendo la lista de productos que pertenecen a ella.</p> </li> <li> <p>Campos:</p> <ul> <li><code>id</code>, <code>name</code>: datos b\u00e1sicos de la categor\u00eda.</li> <li><code>get_absolute_url</code>: URL relativa para acceder a la categor\u00eda.</li> <li><code>products</code>: lista de productos relacionados, serializados con <code>ProductSerializer</code>.</li> </ul> </li> </ul>"},{"location":"dsw/#urls-de-la-aplicacion-product","title":"URLs de la aplicaci\u00f3n Product","text":"<pre><code>from django.urls import path\nfrom product import views\n\nurlpatterns = [\n    path('latest-products/', views.LatestProductsList.as_view(), name='latest-products'),\n    path('products/search/', views.search, name='product-search'),\n    path('products/&lt;slug:category_slug&gt;/&lt;slug:product_slug&gt;/', views.ProductDetail.as_view(), name='product-detail'),\n    path('products/&lt;slug:category_slug&gt;/', views.CategoryDetail.as_view(), name='category-detail'),\n]\n</code></pre>"},{"location":"dsw/#tests_2","title":"Tests","text":"<p>Utilizo <code>APITestCase</code> de Django REST Framework para validar las principales funcionalidades de la API de productos, asegurando que las vistas respondan correctamente y que los datos devueltos sean los esperados.</p> <pre><code>from rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.urls import reverse\nfrom .models import Category, Product\n\nclass ProductAPITest(APITestCase):\n    def setUp(self):\n        # Crear una categor\u00eda y un producto para usar en los tests\n        self.category = Category.objects.create(name=\"Test Category\", slug=\"test-category\")\n        self.product = Product.objects.create(\n            category=self.category,\n            name=\"Test Product\",\n            slug=\"test-product\",\n            price=9.99,\n            weight=100\n        )\n</code></pre>"},{"location":"dsw/#test_latest_products_list","title":"test_latest_products_list","text":"<p>Este test verifica que la vista de productos m\u00e1s recientes (<code>latest-products</code>) responda con \u00e9xito (c\u00f3digo 200) y que el producto creado en <code>setUp</code> aparezca en la lista.</p> <pre><code>def test_latest_products_list(self):\n    url = reverse('latest-products')  \n    # Construcci\u00f3n din\u00e1mica de la URL usando el nombre de la ruta\n    response = self.client.get('/api/v1/latest-products/')  \n    # Se puede usar directamente la URL\n    self.assertEqual(response.status_code, status.HTTP_200_OK) \n     # Comprobamos respuesta exitosa\n    # Confirmamos que \"Test Product\" est\u00e9 en los datos recibidos\n    self.assertTrue(any(p['name'] == \"Test Product\" for p in response.data))\n</code></pre>"},{"location":"dsw/#test_product_detail","title":"test_product_detail","text":"<p>Comprueba que la vista de detalle de producto funcione correctamente, devolviendo el producto esperado cuando se consulta por categor\u00eda y slug.</p> <pre><code>def test_product_detail(self):\n    url = f'/api/v1/products/{self.category.slug}/{self.product.slug}/'\n    response = self.client.get(url)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['name'], \"Test Product\")  \n    # Validamos que el producto sea el correcto\n</code></pre>"},{"location":"dsw/#test_category_detail","title":"test_category_detail","text":"<p>Valida que la vista de detalle de categor\u00eda responde correctamente e incluye la lista de productos asociados.</p> <pre><code>def test_category_detail(self):\n    url = f'/api/v1/products/{self.category.slug}/'\n    response = self.client.get(url)\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['name'], \"Test Category\")  \n    # Confirmamos la categor\u00eda\n    self.assertTrue('products' in response.data) \n     # Verificamos que se devuelvan los productos relacionados\n</code></pre>"},{"location":"dsw/#test_search_products","title":"test_search_products","text":"<p>Test para la funcionalidad de b\u00fasqueda. Env\u00eda una consulta y verifica que el producto que contiene el t\u00e9rmino se incluya en la respuesta.</p> <pre><code>def test_search_products(self):\n    url = '/api/v1/products/search/'\n    response = self.client.post(url, {'query': 'Test'}, format='json')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertTrue(any(p['name'] == \"Test Product\" for p in response.data))\n</code></pre>"},{"location":"dsw/#test_search_no_query","title":"test_search_no_query","text":"<p>Asegura que si no se env\u00eda ning\u00fan t\u00e9rmino de b\u00fasqueda, la respuesta sea exitosa y se retorne una lista vac\u00eda.</p> <pre><code>def test_search_no_query(self):\n    url = '/api/v1/products/search/'\n    response = self.client.post(url, {}, format='json')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.data['products'], [])\n</code></pre>"},{"location":"dsw/#aplicacion-order","title":"Aplicaci\u00f3n Order","text":""},{"location":"dsw/#modelo","title":"Modelo","text":"<p>Representa una orden de compra realizada por un usuario en la tienda. Contiene informaci\u00f3n del cliente, detalles del pago y estado del env\u00edo.</p>"},{"location":"dsw/#campos-principales","title":"Campos principales:","text":"<ul> <li><code>user</code>: Relaci\u00f3n con el modelo <code>User</code> de Django. Indica el cliente que realiz\u00f3 el pedido.</li> <li><code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>address</code>, <code>zipcode</code>, <code>place</code>, <code>phone</code>: Datos personales y de contacto del comprador para la entrega.</li> <li><code>created_at</code>: Fecha y hora en que se cre\u00f3 el pedido. Se asigna autom\u00e1ticamente.</li> <li><code>paid_amount</code>: Monto total pagado por el pedido. Puede estar vac\u00edo si el pago no se ha procesado a\u00fan.</li> <li><code>stripe_token</code>: Token asociado a Stripe para el pago, usado para validaci\u00f3n y seguimiento del pago.</li> <li><code>shipping_cost</code>: Costo del env\u00edo, que puede variar seg\u00fan el destino o m\u00e9todo.</li> <li><code>status</code>: Estado actual del pedido. Puede ser:<ul> <li><code>\"processing\"</code> (En proceso)</li> <li><code>\"shipped\"</code> (Enviado)</li> <li><code>\"delivered\"</code> (Entregado)</li> </ul> </li> <li><code>tracking_number</code>: N\u00famero de seguimiento para el env\u00edo, opcional y se asigna cuando est\u00e1 disponible.</li> </ul>"},{"location":"dsw/#comportamiento","title":"Comportamiento:","text":"<ul> <li>Los pedidos se ordenan por fecha de creaci\u00f3n, mostrando primero las m\u00e1s recientes (<code>ordering = ['-created_at']</code>).</li> <li>La representaci\u00f3n en texto (<code>__str__</code>) devuelve el nombre del comprador, para identificaci\u00f3n r\u00e1pida en el admin o logs.</li> </ul>"},{"location":"dsw/#modelo-orderitem","title":"Modelo <code>OrderItem</code>","text":"<p>Representa un \u00edtem individual dentro de un pedido, es decir, un producto comprado.</p>"},{"location":"dsw/#campos-principales_1","title":"Campos principales:","text":"<ul> <li><code>order</code>: Relaci\u00f3n con <code>Order</code>. Un \u00edtem pertenece a un pedido espec\u00edfico.</li> <li><code>product</code>: Relaci\u00f3n con <code>Product</code>. El producto que fue comprado.</li> <li><code>price</code>: Precio unitario del producto en el momento de la compra. Esto garantiza que cambios futuros en precios no afecten el hist\u00f3rico de \u00f3rdenes.</li> <li><code>quantity</code>: Cantidad comprada de ese producto.</li> <li><code>selected_option</code>: Opcional, describe alguna variante o opci\u00f3n elegida para el producto (por ejemplo, talla, color).</li> </ul>"},{"location":"dsw/#comportamiento_1","title":"Comportamiento:","text":"<ul> <li>La representaci\u00f3n en texto devuelve el <code>id</code> del \u00edtem, para referencias sencillas.</li> </ul> <p>Esta aplicaci\u00f3n permite gestionar pedidos complejos, donde cada orden puede contener m\u00faltiples productos con opciones espec\u00edficas. Se almacena informaci\u00f3n del cliente y del pago para facilitar la gesti\u00f3n y seguimiento, as\u00ed como el estado de env\u00edo.</p>"},{"location":"dsw/#vistas_1","title":"Vistas","text":""},{"location":"dsw/#checkout-funcion-vista","title":"<code>checkout</code> (Funci\u00f3n vista)","text":"<p>Descripci\u00f3n:</p> <p>Permite a un usuario autenticado realizar el pago y crear una nueva orden.</p> <p>M\u00e9todo:</p> <p><code>POST</code></p> <p>Autenticaci\u00f3n y permisos:</p> <ul> <li>Solo usuarios autenticados mediante token pueden acceder.</li> </ul> <p>Flujo principal:</p> <ol> <li>Recibe los datos de la orden desde el cliente.</li> <li>Valida los datos con <code>OrderSerializer</code>.</li> <li>Calcula el total a cobrar sumando el costo de los productos y el env\u00edo.</li> <li>Realiza el cobro mediante la API de Stripe usando el token recibido.</li> <li>Si el pago es exitoso, guarda la orden asoci\u00e1ndola al usuario autenticado.</li> <li>Devuelve la orden creada con estado HTTP 201.</li> </ol> <p>Errores:</p> <ul> <li>Si falla la validaci\u00f3n o el cobro con Stripe, devuelve error 400 con detalles.</li> </ul> <pre><code>@api_view(['POST'])\n@authentication_classes([authentication.TokenAuthentication])\n@permission_classes([permissions.IsAuthenticated])\ndef checkout(request):\n    serializer = OrderSerializer(data=request.data)\n\n    if serializer.is_valid():\n        stripe.api_key = settings.STRIPE_SECRET_KEY\n\n        items = serializer.validated_data['items']\n        shipping_cost = serializer.validated_data.get('shipping_cost', 0)\n\n        paid_amount = sum(item.get('quantity') * item.get('product').price for item in items)\n        total_to_charge = paid_amount + shipping_cost\n\n        try:\n            charge = stripe.Charge.create(\n                amount=int(total_to_charge * 100),\n                currency='EUR',\n                description='Charge from Charge from TangerineMessStore',\n                source=serializer.validated_data['stripe_token']\n            )\n\n            serializer.save(user=request.user, paid_amount=total_to_charge)\n\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        except Exception:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"dsw/#orderslist-clase-basada-en-vista-apiview","title":"<code>OrdersList</code> (Clase basada en vista - APIView)","text":"<p>Descripci\u00f3n:</p> <p>Lista todas las \u00f3rdenes realizadas por el usuario autenticado.</p> <p>M\u00e9todo:</p> <p><code>GET</code></p> <p>Autenticaci\u00f3n y permisos:</p> <ul> <li>Solo usuarios autenticados mediante token pueden acceder.</li> </ul> <p>Flujo principal:</p> <ol> <li>Filtra las \u00f3rdenes por el usuario autenticado.</li> <li>Serializa la lista con <code>MyOrderSerializer</code>.</li> <li>Devuelve la lista de \u00f3rdenes en formato JSON.</li> </ol> <pre><code>class OrdersList(APIView):\n    authentication_classes = [authentication.TokenAuthentication]\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get(self, request, format=None):\n        orders = Order.objects.filter(user=request.user)\n        serializer = MyOrderSerializer(orders, many=True)\n        return Response(serializer.data)\n</code></pre> <ul> <li>Se usa Stripe para procesar pagos, configurando la clave secreta desde la configuraci\u00f3n del proyecto.</li> <li>La l\u00f3gica de cobro es manejada dentro de la vista <code>checkout</code>, asegurando que solo se cree la orden tras confirmarse el pago.</li> <li>El uso de autenticaci\u00f3n por token garantiza seguridad y control de acceso a las \u00f3rdenes y pagos.</li> </ul> <p></p>"},{"location":"dsw/#tests_3","title":"Tests","text":"<p>Estos tests comprueban el correcto funcionamiento de los endpoints relacionados con la creaci\u00f3n de pedidos (checkout) y la consulta de pedidos existentes para un usuario autenticado.</p> <pre><code>from rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\nfrom rest_framework.authtoken.models import Token\nfrom django.urls import reverse\nfrom .models import Order, OrderItem\nfrom product.models import Product, Category\n</code></pre>"},{"location":"dsw/#setup-inicial","title":"Setup inicial","text":"<p>Se crea un usuario de prueba con token de autenticaci\u00f3n, as\u00ed como una categor\u00eda y producto para simular la compra.</p> <pre><code>def setUp(self):\n    self.user = User.objects.create_user(username='testuser', password='testpass')\n    self.token = Token.objects.create(user=self.user)\n    self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)\n\n    self.category = Category.objects.create(name=\"Test Category\", slug=\"test-category\")\n    self.product = Product.objects.create(\n        category=self.category,\n        name=\"Test Product\",\n        slug=\"test-product\",\n        price=10.00,\n        weight=100\n    )\n</code></pre>"},{"location":"dsw/#test-exito-en-checkout","title":"Test: \u00c9xito en checkout","text":"<p>Este test env\u00eda una solicitud POST v\u00e1lida a la ruta de checkout para crear un pedido. Se valida que:</p> <ul> <li>La respuesta sea HTTP 201 (creado).</li> <li>Se haya creado un pedido y un \u00edtem relacionado.</li> <li>El monto pagado sea el correcto (precio productos + env\u00edo).</li> </ul> <pre><code>def test_checkout_success(self):\n    url = reverse('checkout')\n    data = {\n        \"first_name\": \"Sergio\",\n        \"last_name\": \"Delgado\",\n        \"email\": \"matraca@example.com\",\n        \"address\": \"123 Matracazo\",\n        \"zipcode\": \"12345\",\n        \"place\": \"City\",\n        \"phone\": \"1234567890\",\n        \"stripe_token\": \"tok_visa\",\n        \"shipping_cost\": \"5.00\",\n        \"items\": [\n            {\n                \"product\": self.product.id,\n                \"quantity\": 2,\n                \"price\": \"10.00\"\n            }\n        ]\n    }\n    response = self.client.post(url, data, format='json')\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(Order.objects.count(), 1)\n    self.assertEqual(OrderItem.objects.count(), 1)\n    self.assertEqual(Order.objects.first().paid_amount, 25.00)  # (2*10) + 5 env\u00edo\n</code></pre>"},{"location":"dsw/#test-checkout-con-campos-faltantes","title":"Test: Checkout con campos faltantes","text":"<p>Verifica que la API rechace solicitudes incompletas o inv\u00e1lidas, devolviendo un error HTTP 400.</p> <pre><code>def test_checkout_missing_fields(self):\n    url = reverse('checkout')\n    data = {\n        \"first_name\": \"Sergio\",\n        \"stripe_token\": \"tok_visa\",\n        \"items\": []\n    }\n    response = self.client.post(url, data, format='json')\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"dsw/#test-listado-de-pedidos-del-usuario","title":"Test: Listado de pedidos del usuario","text":"<p>Simula la consulta GET para obtener los pedidos creados por el usuario autenticado. Verifica que la respuesta sea correcta y que se devuelva la cantidad adecuada de pedidos.</p> <pre><code>def test_orders_list(self):\n    order = Order.objects.create(\n        user=self.user,\n        first_name=\"Sergio\",\n        last_name=\"Doe\",\n        email=\"matraca@example.com\",\n        address=\"123 Matracazo\",\n        zipcode=\"12345\",\n        place=\"City\",\n        phone=\"1234567890\",\n        stripe_token=\"tok_visa\",\n        paid_amount=15.00\n    )\n    response = self.client.get(reverse('orders-list'))\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(len(response.data), 1)\n</code></pre>"},{"location":"dsw/#urls_2","title":"Urls","text":"<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('checkout/', views.checkout, name='checkout'),\n    path('orders/', views.OrdersList.as_view(), name='orders-list'),\n]\n</code></pre>"},{"location":"eie/","title":"EIE","text":""},{"location":"eie/#plan-de-marketing","title":"PLAN DE MARKETING","text":""},{"location":"eie/#11-analisis-de-mercado","title":"1.1 An\u00e1lisis de mercado","text":"<p>El p\u00fablico objetivo comprende principalmente personas entre 15 y 40 a\u00f1os, apasionadas por el anime, los videojuegos, la m\u00fasica y las series. Son fans de artistas independientes que buscan productos originales y personalizados que reflejen sus intereses.</p> <p>El producto estrella de la artista \u2014ilustraciones convertidas en merchandising como llaveros, pines, peluches y pegatinas\u2014 conecta con ese perfil de consumidor que busca piezas \u00fanicas ausentes en el merchandising oficial, frecuentemente limitado o gen\u00e9rico.</p> <p>En cuanto a la competencia, numerosos artistas utilizan plataformas como Etsy, Ko-fi o redes sociales (Instagram, Twitter) para promocionarse. Sin embargo, pocos disponen de una web profesional que centralice su presencia: tienda, portfolio, contacto y eventos. Esta web personal marca la diferencia al ofrecer una experiencia de usuario m\u00e1s coherente, profesional y directa. Adem\u00e1s, reduce comisiones de terceros y permite adaptar el dise\u00f1o a la est\u00e9tica de la artista.</p> <p>En los \u00faltimos a\u00f1os ha crecido la visibilidad del Artist Alley en ferias de manga y c\u00f3mic por toda Espa\u00f1a, y el p\u00fablico valora cada vez m\u00e1s las obras \u00fanicas. El cliente ideal aprecia el contacto directo con la artista, por lo que la web incluye un formulario para pedidos personalizados y comisiones.</p>"},{"location":"eie/#12-propuesta-de-valor","title":"1.2 Propuesta de valor","text":"<p>La tienda ofrece productos ilustrados de forma original, creados por una artista independiente, con un estilo visual propio y una conexi\u00f3n emocional con personajes y universos que los fans adoran.</p> <p>Adem\u00e1s de productos artesanales \u00fanicos, la web funciona como escaparate del talento de la artista: incluye portfolio, blog, calendario de eventos, contacto directo y una tienda profesional.</p> <p>Todo est\u00e1 centralizado, accesible desde cualquier red social o tarjeta de visita en eventos. Esto brinda al p\u00fablico una experiencia m\u00e1s directa, personalizada y confiable, permitiendo a la artista construir una comunidad fiel.</p>"},{"location":"eie/#13-estrategias-de-promocion-y-publicidad","title":"1.3 Estrategias de promoci\u00f3n y publicidad","text":"<ul> <li>Redes sociales (Instagram, Tumblr, Twitter): Publicaciones peri\u00f3dicas mostrando nuevos productos, procesos creativos, contenido detr\u00e1s de c\u00e1maras (\"work in progress\") y participaci\u00f3n en eventos.</li> <li>Blog en la web: Art\u00edculos sobre la inspiraci\u00f3n de sus personajes, dise\u00f1o de productos y experiencias en ferias, fortaleciendo el v\u00ednculo con la comunidad.</li> <li>Colaboraciones con tiendas o artistas para ampliar alcance y diversificar el p\u00fablico.</li> <li>Promociones: Pegatinas de regalo en primeras compras online, descuentos por combo o durante eventos especiales.</li> <li>Difusi\u00f3n cruzada: Incluir la direcci\u00f3n web en tarjetas, flyers, packaging y redes para redirigir tr\u00e1fico a la tienda online desde mercadillos f\u00edsicos.</li> </ul>"},{"location":"eie/#14-estrategia-de-ventas-y-precios","title":"1.4 Estrategia de ventas y precios","text":"<ul> <li>Estructura de precios: Basada en tipo de producto, tama\u00f1o y materiales. Ej: pegatinas (1-2 \u20ac), llaveros (5-8 \u20ac), peluches (20-40 \u20ac), comisiones digitales por encargo (seg\u00fan detalle y tipo).</li> <li>Upselling: Incentivar la compra de productos de mayor valor, como packs o productos premium (ediciones especiales).</li> <li>Cross-selling: Combos de productos relacionados (ej: \"combo anime X\" con llavero, postal y pin).</li> <li>Stock B: Venta con descuento de productos con imperfecciones m\u00ednimas.</li> <li>Ediciones limitadas: Productos \u00fanicos o con tiradas cortas para crear exclusividad (\"solo 20 unidades disponibles\").</li> </ul>"},{"location":"eie/#15-medicion-y-kpis","title":"1.5 Medici\u00f3n y KPIs","text":"<p>Para evaluar el rendimiento del proyecto se emplear\u00e1n estos indicadores medibles:</p> <ul> <li>Conversiones: Relaci\u00f3n entre visitas, registros y ventas en la tienda.</li> <li>Engagement en redes sociales: N\u00famero de likes, comentarios, compartidos y mensajes directos.</li> <li>Crecimiento de comunidad: Seguidores en Instagram/X o visitas recurrentes.</li> <li>Clientes recurrentes: Usuarios que recompran en un periodo determinado e incremento de clientes en eventos f\u00edsicos gracias a la visibilidad web.</li> <li>ROI (Retorno de la inversi\u00f3n): Medici\u00f3n del rendimiento de acciones promocionales, como ofrecer productos extra en pedidos online o recompensar en eventos f\u00edsicos a compradores previos de la web. El ROI comparar\u00e1 el gasto en promociones con los beneficios obtenidos en ventas directas, fidelizaci\u00f3n y aumento del tr\u00e1fico web, evaluando el impacto positivo real y sostenible de estas estrategias.</li> </ul>"},{"location":"eie/#plan-de-sostenibilidad","title":"PLAN DE SOSTENIBILIDAD","text":""},{"location":"eie/#21-sostenibilidad-economica","title":"2.1 Sostenibilidad econ\u00f3mica","text":"<p>La web propia permite reducir costes de intermediarios (como Etsy, Ko-fi) y controlar directamente el canal de ventas, aumentando el margen de beneficio por producto.</p> <p>Centralizar la actividad reduce gastos en publicidad dispersa y herramientas externas. La gesti\u00f3n bajo demanda evita exceso de stock, y la estructura web est\u00e1 dise\u00f1ada para crecer en funcionalidad seg\u00fan el negocio evoluciona, sin grandes inversiones iniciales.</p> <p>La plataforma facilita la implementaci\u00f3n de estrategias de venta como packs, promociones y comisiones personalizadas.</p>"},{"location":"eie/#22-sostenibilidad-social","title":"2.2 Sostenibilidad social","text":"<p>El dise\u00f1o web incorpora navegaci\u00f3n accesible, textos inclusivos y lenguaje cercano, creando una experiencia positiva para p\u00fablicos diversos.</p> <p>La secci\u00f3n de blog y portfolio divulga contenidos que conectan con intereses culturales y educativos, promoviendo valores de creatividad, identidad personal y comunidad.</p> <p>La web potencia el trabajo de una creadora canaria, impulsando el talento local y facilitando conexiones con otros artistas y eventos, tanto en Canarias como en la pen\u00ednsula.</p> <p>La creaci\u00f3n de cuentas de usuario con beneficios exclusivos fomenta una comunidad cercana y duradera.</p>"},{"location":"eie/#23-sostenibilidad-ambiental","title":"2.3 Sostenibilidad ambiental","text":"<p>La web est\u00e1 optimizada para ser ligera y eficiente, con im\u00e1genes y recursos optimizados para reducir el consumo energ\u00e9tico. Se utilizar\u00e1 un proveedor de hosting verde o de bajas emisiones, alineado con buenas pr\u00e1cticas ecol\u00f3gicas.</p> <p>La disponibilidad digital del cat\u00e1logo, informaci\u00f3n de eventos y contacto reduce la necesidad de materiales impresos, minimizando residuos.</p> <p>En conjunto, la plataforma promueve un consumo m\u00e1s consciente, donde cada pedido es informado, meditado y gestionado con mejor trazabilidad que los canales masivos o impersonales.</p>"}]}